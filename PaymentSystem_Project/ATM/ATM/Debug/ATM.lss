
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000328  00800060  00001f12  00001fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031b  00800388  00800388  000022ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ead  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129b  00000000  00000000  000065f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022a4  00000000  00000000  0000788c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  00009b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ca5  00000000  00000000  0000a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b97  00000000  00000000  0000b165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0000dcfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <System_Init+0x26>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	13 e0       	ldi	r17, 0x03	; 3
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e1       	ldi	r30, 0x12	; 18
      ea:	ff e1       	ldi	r31, 0x1F	; 31
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a8 38       	cpi	r26, 0x88	; 136
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	26 e0       	ldi	r18, 0x06	; 6
      fa:	a8 e8       	ldi	r26, 0x88	; 136
      fc:	b3 e0       	ldi	r27, 0x03	; 3
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a3 3a       	cpi	r26, 0xA3	; 163
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 d7 06 	call	0xdae	; 0xdae <main>
     10c:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <reverse>:
	UART_uint8_tSendString( STRING_WELCOME_END);
}

void Reset_WrittenAddresses()
{
	EEPROM_Write(EEPROM_CH, AVALIABLE_ACCOUNTS_BLOCK, AVALIABLE_ACCOUNTS_ADDR, AVALIABLE_ACCOUNTS_NULL);
     114:	9c 01       	movw	r18, r24
     116:	61 50       	subi	r22, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0c c0       	rjmp	.+24     	; 0x134 <reverse+0x20>
     11c:	d9 01       	movw	r26, r18
     11e:	a9 0f       	add	r26, r25
     120:	b1 1d       	adc	r27, r1
     122:	8c 91       	ld	r24, X
     124:	f9 01       	movw	r30, r18
     126:	e6 0f       	add	r30, r22
     128:	f1 1d       	adc	r31, r1
     12a:	40 81       	ld	r20, Z
     12c:	4c 93       	st	X, r20
     12e:	80 83       	st	Z, r24
     130:	9f 5f       	subi	r25, 0xFF	; 255
     132:	61 50       	subi	r22, 0x01	; 1
     134:	96 17       	cp	r25, r22
     136:	90 f3       	brcs	.-28     	; 0x11c <reverse+0x8>
     138:	08 95       	ret

0000013a <intToStr>:
     13a:	4f 92       	push	r4
     13c:	5f 92       	push	r5
     13e:	6f 92       	push	r6
     140:	7f 92       	push	r7
     142:	af 92       	push	r10
     144:	bf 92       	push	r11
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	ea 01       	movw	r28, r20
     158:	28 01       	movw	r4, r16
     15a:	39 01       	movw	r6, r18
     15c:	c1 2c       	mov	r12, r1
     15e:	d1 2c       	mov	r13, r1
     160:	76 01       	movw	r14, r12
     162:	15 c0       	rjmp	.+42     	; 0x18e <intToStr+0x54>
     164:	5e 01       	movw	r10, r28
     166:	ac 0c       	add	r10, r12
     168:	bd 1c       	adc	r11, r13
     16a:	2a e0       	ldi	r18, 0x0A	; 10
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
     176:	60 5d       	subi	r22, 0xD0	; 208
     178:	f5 01       	movw	r30, r10
     17a:	60 83       	st	Z, r22
     17c:	62 2f       	mov	r22, r18
     17e:	73 2f       	mov	r23, r19
     180:	84 2f       	mov	r24, r20
     182:	95 2f       	mov	r25, r21
     184:	ff ef       	ldi	r31, 0xFF	; 255
     186:	cf 1a       	sub	r12, r31
     188:	df 0a       	sbc	r13, r31
     18a:	ef 0a       	sbc	r14, r31
     18c:	ff 0a       	sbc	r15, r31
     18e:	61 15       	cp	r22, r1
     190:	71 05       	cpc	r23, r1
     192:	81 05       	cpc	r24, r1
     194:	91 05       	cpc	r25, r1
     196:	31 f7       	brne	.-52     	; 0x164 <intToStr+0x2a>
     198:	0a c0       	rjmp	.+20     	; 0x1ae <intToStr+0x74>
     19a:	fe 01       	movw	r30, r28
     19c:	ec 0d       	add	r30, r12
     19e:	fd 1d       	adc	r31, r13
     1a0:	80 e3       	ldi	r24, 0x30	; 48
     1a2:	80 83       	st	Z, r24
     1a4:	2f ef       	ldi	r18, 0xFF	; 255
     1a6:	c2 1a       	sub	r12, r18
     1a8:	d2 0a       	sbc	r13, r18
     1aa:	e2 0a       	sbc	r14, r18
     1ac:	f2 0a       	sbc	r15, r18
     1ae:	c4 14       	cp	r12, r4
     1b0:	d5 04       	cpc	r13, r5
     1b2:	e6 04       	cpc	r14, r6
     1b4:	f7 04       	cpc	r15, r7
     1b6:	88 f3       	brcs	.-30     	; 0x19a <intToStr+0x60>
     1b8:	6c 2d       	mov	r22, r12
     1ba:	ce 01       	movw	r24, r28
     1bc:	0e 94 8a 00 	call	0x114	; 0x114 <reverse>
     1c0:	cc 0d       	add	r28, r12
     1c2:	dd 1d       	adc	r29, r13
     1c4:	18 82       	st	Y, r1
     1c6:	8c 2d       	mov	r24, r12
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	bf 90       	pop	r11
     1da:	af 90       	pop	r10
     1dc:	7f 90       	pop	r7
     1de:	6f 90       	pop	r6
     1e0:	5f 90       	pop	r5
     1e2:	4f 90       	pop	r4
     1e4:	08 95       	ret

000001e6 <ftos>:
     1e6:	4f 92       	push	r4
     1e8:	5f 92       	push	r5
     1ea:	6f 92       	push	r6
     1ec:	7f 92       	push	r7
     1ee:	8f 92       	push	r8
     1f0:	9f 92       	push	r9
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	6b 01       	movw	r12, r22
     206:	7c 01       	movw	r14, r24
     208:	4a 01       	movw	r8, r20
     20a:	b2 2e       	mov	r11, r18
     20c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fixunssfsi>
     210:	2b 01       	movw	r4, r22
     212:	3c 01       	movw	r6, r24
     214:	0e 94 92 0c 	call	0x1924	; 0x1924 <__floatunsisf>
     218:	9b 01       	movw	r18, r22
     21a:	ac 01       	movw	r20, r24
     21c:	c7 01       	movw	r24, r14
     21e:	b6 01       	movw	r22, r12
     220:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
     224:	6b 01       	movw	r12, r22
     226:	7c 01       	movw	r14, r24
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	10 e0       	ldi	r17, 0x00	; 0
     22c:	98 01       	movw	r18, r16
     22e:	a4 01       	movw	r20, r8
     230:	c3 01       	movw	r24, r6
     232:	b2 01       	movw	r22, r4
     234:	0e 94 9d 00 	call	0x13a	; 0x13a <intToStr>
     238:	bb 20       	and	r11, r11
     23a:	39 f1       	breq	.+78     	; 0x28a <ftos+0xa4>
     23c:	c8 2f       	mov	r28, r24
     23e:	d0 e0       	ldi	r29, 0x00	; 0
     240:	f4 01       	movw	r30, r8
     242:	ec 0f       	add	r30, r28
     244:	fd 1f       	adc	r31, r29
     246:	8e e2       	ldi	r24, 0x2E	; 46
     248:	80 83       	st	Z, r24
     24a:	4b 2c       	mov	r4, r11
     24c:	51 2c       	mov	r5, r1
     24e:	61 2c       	mov	r6, r1
     250:	71 2c       	mov	r7, r1
     252:	c3 01       	movw	r24, r6
     254:	b2 01       	movw	r22, r4
     256:	0e 94 92 0c 	call	0x1924	; 0x1924 <__floatunsisf>
     25a:	9b 01       	movw	r18, r22
     25c:	ac 01       	movw	r20, r24
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	80 e2       	ldi	r24, 0x20	; 32
     264:	91 e4       	ldi	r25, 0x41	; 65
     266:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pow>
     26a:	9b 01       	movw	r18, r22
     26c:	ac 01       	movw	r20, r24
     26e:	c7 01       	movw	r24, r14
     270:	b6 01       	movw	r22, r12
     272:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__mulsf3>
     276:	21 96       	adiw	r28, 0x01	; 1
     278:	c8 0d       	add	r28, r8
     27a:	d9 1d       	adc	r29, r9
     27c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fixunssfsi>
     280:	93 01       	movw	r18, r6
     282:	82 01       	movw	r16, r4
     284:	ae 01       	movw	r20, r28
     286:	0e 94 9d 00 	call	0x13a	; 0x13a <intToStr>
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	bf 90       	pop	r11
     29c:	9f 90       	pop	r9
     29e:	8f 90       	pop	r8
     2a0:	7f 90       	pop	r7
     2a2:	6f 90       	pop	r6
     2a4:	5f 90       	pop	r5
     2a6:	4f 90       	pop	r4
     2a8:	08 95       	ret

000002aa <findLength>:
     2aa:	ac 01       	movw	r20, r24
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	cb 01       	movw	r24, r22
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <findLength+0x12>
     2b4:	6f 5f       	subi	r22, 0xFF	; 255
     2b6:	7f 4f       	sbci	r23, 0xFF	; 255
     2b8:	8f 4f       	sbci	r24, 0xFF	; 255
     2ba:	9f 4f       	sbci	r25, 0xFF	; 255
     2bc:	fa 01       	movw	r30, r20
     2be:	e6 0f       	add	r30, r22
     2c0:	f7 1f       	adc	r31, r23
     2c2:	20 81       	ld	r18, Z
     2c4:	21 11       	cpse	r18, r1
     2c6:	f6 cf       	rjmp	.-20     	; 0x2b4 <findLength+0xa>
     2c8:	08 95       	ret

000002ca <stof>:
     2ca:	4f 92       	push	r4
     2cc:	5f 92       	push	r5
     2ce:	6f 92       	push	r6
     2d0:	7f 92       	push	r7
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	8c 01       	movw	r16, r24
     2ec:	0e 94 55 01 	call	0x2aa	; 0x2aa <findLength>
     2f0:	2b 01       	movw	r4, r22
     2f2:	3c 01       	movw	r6, r24
     2f4:	c0 e0       	ldi	r28, 0x00	; 0
     2f6:	c1 2c       	mov	r12, r1
     2f8:	d1 2c       	mov	r13, r1
     2fa:	76 01       	movw	r14, r12
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	cb 01       	movw	r24, r22
     302:	29 c0       	rjmp	.+82     	; 0x356 <stof+0x8c>
     304:	f8 01       	movw	r30, r16
     306:	ec 0f       	add	r30, r28
     308:	f1 1d       	adc	r31, r1
     30a:	d0 81       	ld	r29, Z
     30c:	de 32       	cpi	r29, 0x2E	; 46
     30e:	61 f4       	brne	.+24     	; 0x328 <stof+0x5e>
     310:	73 01       	movw	r14, r6
     312:	62 01       	movw	r12, r4
     314:	c8 18       	sub	r12, r8
     316:	d9 08       	sbc	r13, r9
     318:	ea 08       	sbc	r14, r10
     31a:	fb 08       	sbc	r15, r11
     31c:	21 e0       	ldi	r18, 0x01	; 1
     31e:	c2 1a       	sub	r12, r18
     320:	d1 08       	sbc	r13, r1
     322:	e1 08       	sbc	r14, r1
     324:	f1 08       	sbc	r15, r1
     326:	16 c0       	rjmp	.+44     	; 0x354 <stof+0x8a>
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e2       	ldi	r20, 0x20	; 32
     32e:	51 e4       	ldi	r21, 0x41	; 65
     330:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__mulsf3>
     334:	4b 01       	movw	r8, r22
     336:	5c 01       	movw	r10, r24
     338:	6d 2f       	mov	r22, r29
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	60 53       	subi	r22, 0x30	; 48
     33e:	71 09       	sbc	r23, r1
     340:	07 2e       	mov	r0, r23
     342:	00 0c       	add	r0, r0
     344:	88 0b       	sbc	r24, r24
     346:	99 0b       	sbc	r25, r25
     348:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatsisf>
     34c:	a5 01       	movw	r20, r10
     34e:	94 01       	movw	r18, r8
     350:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     354:	cf 5f       	subi	r28, 0xFF	; 255
     356:	8c 2e       	mov	r8, r28
     358:	91 2c       	mov	r9, r1
     35a:	a1 2c       	mov	r10, r1
     35c:	b1 2c       	mov	r11, r1
     35e:	84 14       	cp	r8, r4
     360:	95 04       	cpc	r9, r5
     362:	a6 04       	cpc	r10, r6
     364:	b7 04       	cpc	r11, r7
     366:	70 f2       	brcs	.-100    	; 0x304 <stof+0x3a>
     368:	08 c0       	rjmp	.+16     	; 0x37a <stof+0xb0>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	40 e2       	ldi	r20, 0x20	; 32
     370:	51 e4       	ldi	r21, 0x41	; 65
     372:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__divsf3>
     376:	75 01       	movw	r14, r10
     378:	64 01       	movw	r12, r8
     37a:	46 01       	movw	r8, r12
     37c:	57 01       	movw	r10, r14
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	82 1a       	sub	r8, r18
     382:	91 08       	sbc	r9, r1
     384:	a1 08       	sbc	r10, r1
     386:	b1 08       	sbc	r11, r1
     388:	cd 28       	or	r12, r13
     38a:	ce 28       	or	r12, r14
     38c:	cf 28       	or	r12, r15
     38e:	69 f7       	brne	.-38     	; 0x36a <stof+0xa0>
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	6f 90       	pop	r6
     3ac:	5f 90       	pop	r5
     3ae:	4f 90       	pop	r4
     3b0:	08 95       	ret

000003b2 <Set_PinData>:
     3b2:	0f 93       	push	r16
     3b4:	05 e0       	ldi	r16, 0x05	; 5
     3b6:	20 e6       	ldi	r18, 0x60	; 96
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	60 ea       	ldi	r22, 0xA0	; 160
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	0e 94 c9 07 	call	0xf92	; 0xf92 <EEPROM_WriteBytes>
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <Get_PinData>:
     3c8:	0f 93       	push	r16
     3ca:	05 e0       	ldi	r16, 0x05	; 5
     3cc:	9c 01       	movw	r18, r24
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	60 ea       	ldi	r22, 0xA0	; 160
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <Check_WrittenAddresses>:
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	1f 92       	push	r1
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	9e 01       	movw	r18, r28
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	64 ea       	ldi	r22, 0xA4	; 164
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	0e 94 31 07 	call	0xe62	; 0xe62 <EEPROM_Read>
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	8f 3f       	cpi	r24, 0xFF	; 255
     3fa:	11 f4       	brne	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <Display_AccountsAvaliable>:
     40a:	85 e6       	ldi	r24, 0x65	; 101
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
     418:	8e e9       	ldi	r24, 0x9E	; 158
     41a:	93 e0       	ldi	r25, 0x03	; 3
     41c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
     420:	8a e7       	ldi	r24, 0x7A	; 122
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
     428:	08 95       	ret

0000042a <Set_WrittenAddresses>:
}

void Set_WrittenAddresses(uint8_t count)
{
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	c8 2f       	mov	r28, r24
	EEPROM_Write(EEPROM_CH, AVALIABLE_ACCOUNTS_BLOCK, AVALIABLE_ACCOUNTS_ADDR, count);
     432:	28 2f       	mov	r18, r24
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	64 ea       	ldi	r22, 0xA4	; 164
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 72 07 	call	0xee4	; 0xee4 <EEPROM_Write>
	intToStr(count, au8_PANNumber, 0);
     43e:	6c 2f       	mov	r22, r28
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	10 e0       	ldi	r17, 0x00	; 0
     44a:	98 01       	movw	r18, r16
     44c:	4e e9       	ldi	r20, 0x9E	; 158
     44e:	53 e0       	ldi	r21, 0x03	; 3
     450:	0e 94 9d 00 	call	0x13a	; 0x13a <intToStr>
	Display_AccountsAvaliable();
     454:	0e 94 05 02 	call	0x40a	; 0x40a <Display_AccountsAvaliable>
}
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <Get_WrittenAddresses>:

uint8_t Get_WrittenAddresses(void)
{
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	1f 92       	push	r1
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	uint8_t count = SPACE_BYTES_NO;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_Read(EEPROM_CH, AVALIABLE_ACCOUNTS_BLOCK, AVALIABLE_ACCOUNTS_ADDR, &count);
     472:	9e 01       	movw	r18, r28
     474:	2f 5f       	subi	r18, 0xFF	; 255
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	64 ea       	ldi	r22, 0xA4	; 164
     47c:	0e 94 31 07 	call	0xe62	; 0xe62 <EEPROM_Read>
	
	if (! Check_WrittenAddresses())
     480:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Check_WrittenAddresses>
     484:	88 23       	and	r24, r24
     486:	61 f0       	breq	.+24     	; 0x4a0 <Get_WrittenAddresses+0x40>
	{
		return FALSE;
	}
	intToStr(count, au8_PANNumber, 0);
     488:	69 81       	ldd	r22, Y+1	; 0x01
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	00 e0       	ldi	r16, 0x00	; 0
     492:	10 e0       	ldi	r17, 0x00	; 0
     494:	98 01       	movw	r18, r16
     496:	4e e9       	ldi	r20, 0x9E	; 158
     498:	53 e0       	ldi	r21, 0x03	; 3
     49a:	0e 94 9d 00 	call	0x13a	; 0x13a <intToStr>
	
	return count;
     49e:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a0:	0f 90       	pop	r0
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	08 95       	ret

000004ac <Check_PANExists>:

uint8_t Check_PANExists(uint8_t count)
{
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	f8 2e       	mov	r15, r24
	uint8_t u8_PANExists = FALSE;
	for (uint8_t u8_iterator = 0; u8_iterator < count; u8_iterator++)
     4b8:	10 e0       	ldi	r17, 0x00	; 0
     4ba:	2e c0       	rjmp	.+92     	; 0x518 <Check_PANExists+0x6c>
	{
		au8_PANAddress = (u8_iterator * TOTAL_FRAME_NO) + ACCOUNTS_ADDR;
     4bc:	91 2f       	mov	r25, r17
     4be:	99 0f       	add	r25, r25
     4c0:	89 2f       	mov	r24, r25
     4c2:	88 0f       	add	r24, r24
     4c4:	88 0f       	add	r24, r24
     4c6:	88 0f       	add	r24, r24
     4c8:	89 1b       	sub	r24, r25
     4ca:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <au8_PANAddress>
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK,au8_PANAddress, au8_PANNumbers[u8_iterator], PAN_BYTES_GUARD_NO);
     4ce:	81 2f       	mov	r24, r17
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	ec 01       	movw	r28, r24
     4d4:	cc 0f       	add	r28, r28
     4d6:	dd 1f       	adc	r29, r29
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	c8 0f       	add	r28, r24
     4e6:	d9 1f       	adc	r29, r25
     4e8:	c8 55       	subi	r28, 0x58	; 88
     4ea:	dc 4f       	sbci	r29, 0xFC	; 252
     4ec:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <au8_PANAddress>
     4f0:	0a e0       	ldi	r16, 0x0A	; 10
     4f2:	9e 01       	movw	r18, r28
     4f4:	66 ea       	ldi	r22, 0xA6	; 166
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
		if ((StringCompare(au8_PANNumber, au8_PANNumbers[u8_iterator])))
     4fc:	be 01       	movw	r22, r28
     4fe:	8e e9       	ldi	r24, 0x9E	; 158
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <StringCompare>
     506:	88 23       	and	r24, r24
     508:	31 f0       	breq	.+12     	; 0x516 <Check_PANExists+0x6a>
		{
			u8_PANExists = TRUE;
			UART_uint8_tSendString(STRING_PAN_EXISTS);
     50a:	87 ea       	ldi	r24, 0xA7	; 167
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	{
		au8_PANAddress = (u8_iterator * TOTAL_FRAME_NO) + ACCOUNTS_ADDR;
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK,au8_PANAddress, au8_PANNumbers[u8_iterator], PAN_BYTES_GUARD_NO);
		if ((StringCompare(au8_PANNumber, au8_PANNumbers[u8_iterator])))
		{
			u8_PANExists = TRUE;
     512:	81 e0       	ldi	r24, 0x01	; 1
			UART_uint8_tSendString(STRING_PAN_EXISTS);
			break;
     514:	04 c0       	rjmp	.+8      	; 0x51e <Check_PANExists+0x72>
}

uint8_t Check_PANExists(uint8_t count)
{
	uint8_t u8_PANExists = FALSE;
	for (uint8_t u8_iterator = 0; u8_iterator < count; u8_iterator++)
     516:	1f 5f       	subi	r17, 0xFF	; 255
     518:	1f 15       	cp	r17, r15
     51a:	80 f2       	brcs	.-96     	; 0x4bc <Check_PANExists+0x10>
	return count;
}

uint8_t Check_PANExists(uint8_t count)
{
	uint8_t u8_PANExists = FALSE;
     51c:	80 e0       	ldi	r24, 0x00	; 0
			UART_uint8_tSendString(STRING_PAN_EXISTS);
			break;
		}
	}
	return u8_PANExists;
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	08 95       	ret

0000052a <ADMIN_Authenticate>:
		else UART_uint8_tSendString( STRING_INVALID_CHOICE);
	}
}
void ADMIN_Authenticate(void)
{
	Get_PinData(pin);
     52a:	82 e9       	ldi	r24, 0x92	; 146
     52c:	93 e0       	ldi	r25, 0x03	; 3
     52e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Get_PinData>
	while (TRUE)
	{
		UART_uint8_tSendString( STRING_ENTER_PIN);
     532:	8c ec       	ldi	r24, 0xCC	; 204
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
		UART_vdSendByte( BACKSPACE);
     53a:	88 e0       	ldi	r24, 0x08	; 8
     53c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
		UART_uint8_tGetString( user_pin);
     540:	88 e8       	ldi	r24, 0x88	; 136
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	0e 94 0f 0b 	call	0x161e	; 0x161e <UART_uint8_tGetString>
		if ((StringCompare(pin, user_pin))) break;
     548:	68 e8       	ldi	r22, 0x88	; 136
     54a:	73 e0       	ldi	r23, 0x03	; 3
     54c:	82 e9       	ldi	r24, 0x92	; 146
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <StringCompare>
     554:	81 11       	cpse	r24, r1
     556:	05 c0       	rjmp	.+10     	; 0x562 <ADMIN_Authenticate+0x38>
		UART_uint8_tSendString( STRING_INVALID_PIN);
     558:	84 ee       	ldi	r24, 0xE4	; 228
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	}
     560:	e8 cf       	rjmp	.-48     	; 0x532 <ADMIN_Authenticate+0x8>
     562:	08 95       	ret

00000564 <ADMIN_Interface>:
}

uint8_t ADMIN_Interface()
{
     564:	cf 93       	push	r28
	uint8_t u8_choice;
	UART_uint8_tSendString( STRING_WELCOME_START);
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_MENU_SET_CUSTOMER_DATA);
     56e:	81 e3       	ldi	r24, 0x31	; 49
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_MENU_GET_CUSTOMER_DATA);
     576:	86 e4       	ldi	r24, 0x46	; 70
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_MENU_SET_MAX_ACCOUNT);
     57e:	8b e5       	ldi	r24, 0x5B	; 91
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_MENU_GET_MAX_ACCOUNT);
     586:	8a e7       	ldi	r24, 0x7A	; 122
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_MENU_EXIT);
     58e:	89 e9       	ldi	r24, 0x99	; 153
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_WELCOME_END);
     596:	8a e7       	ldi	r24, 0x7A	; 122
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_MENU_CHOICE);
     59e:	81 ea       	ldi	r24, 0xA1	; 161
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_vdSendByte( BACKSPACE);
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
	u8_choice = UART_uint8_tGetByte( );
     5ac:	0e 94 ef 0a 	call	0x15de	; 0x15de <UART_uint8_tGetByte>
     5b0:	c8 2f       	mov	r28, r24
	UART_vdSendByte( NEW_LINE);
     5b2:	8d e0       	ldi	r24, 0x0D	; 13
     5b4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>

		UART_vdSendByte( NEW_LINE);
		if ((u8_choice < OPTION_EXIT) && (u8_choice > OPTION_SET_CUSTOMER_DATA)) break;
	}
	return u8_choice; 
}
     5b8:	8c 2f       	mov	r24, r28
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <ADMIN_GetAccount>:
void ADMIN_GetAccount(void)
{
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	00 d0       	rcall	.+0      	; 0x5ca <ADMIN_GetAccount+0xc>
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <ADMIN_GetAccount+0xe>
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t i = 0;
	float32_t f;
	uint8_t count = Get_WrittenAddresses();
     5d0:	0e 94 30 02 	call	0x460	; 0x460 <Get_WrittenAddresses>
     5d4:	f8 2e       	mov	r15, r24
	if (! Check_WrittenAddresses())
     5d6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Check_WrittenAddresses>
     5da:	81 11       	cpse	r24, r1
     5dc:	4c c0       	rjmp	.+152    	; 0x676 <ADMIN_GetAccount+0xb8>
	{
		UART_uint8_tSendString( STRING_MEMORY_EMPTY);
     5de:	85 eb       	ldi	r24, 0xB5	; 181
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
     5e6:	4f c0       	rjmp	.+158    	; 0x686 <ADMIN_GetAccount+0xc8>
		return;
	}
	while (i < count)
	{
		au8_PANAddress = (i* TOTAL_FRAME_NO) + ACCOUNTS_ADDR;
     5e8:	91 2f       	mov	r25, r17
     5ea:	99 0f       	add	r25, r25
     5ec:	89 2f       	mov	r24, r25
     5ee:	88 0f       	add	r24, r24
     5f0:	88 0f       	add	r24, r24
     5f2:	88 0f       	add	r24, r24
     5f4:	89 1b       	sub	r24, r25
     5f6:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <au8_PANAddress>
		au8_SPACEAddress = au8_PANAddress + PAN_BYTES_NO;
     5fa:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <au8_PANAddress>
     5fe:	87 5f       	subi	r24, 0xF7	; 247
     600:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <au8_SPACEAddress>
		au8_AccountBalanceAddress = au8_SPACEAddress + SPACE_BYTES_NO;
     604:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <au8_SPACEAddress>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <au8_AccountBalanceAddress>
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK,au8_PANAddress, au8_PANNumber, PAN_BYTES_NO);
     60e:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <au8_PANAddress>
     612:	09 e0       	ldi	r16, 0x09	; 9
     614:	2e e9       	ldi	r18, 0x9E	; 158
     616:	33 e0       	ldi	r19, 0x03	; 3
     618:	66 ea       	ldi	r22, 0xA6	; 166
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
		UART_uint8_tSendString( STRING_PAN);
     620:	8e ee       	ldi	r24, 0xEE	; 238
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
		UART_vdSendByte( BACKSPACE);
     628:	88 e0       	ldi	r24, 0x08	; 8
     62a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
		UART_uint8_tSendString( au8_PANNumber);
     62e:	8e e9       	ldi	r24, 0x9E	; 158
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK, au8_AccountBalanceAddress, (uint8_t *) &f, MAX_ACCOUNT_BYTES_NO);
     636:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <au8_AccountBalanceAddress>
     63a:	04 e0       	ldi	r16, 0x04	; 4
     63c:	9e 01       	movw	r18, r28
     63e:	2f 5f       	subi	r18, 0xFF	; 255
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	66 ea       	ldi	r22, 0xA6	; 166
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
		UART_uint8_tSendString( STRING_ACCOUNT);
     64a:	8b e3       	ldi	r24, 0x3B	; 59
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
		UART_vdSendByte( BACKSPACE);
     652:	88 e0       	ldi	r24, 0x08	; 8
     654:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
		ftos(f, au8_AccountBalance, FLOATING_POINT);
     658:	69 81       	ldd	r22, Y+1	; 0x01
     65a:	7a 81       	ldd	r23, Y+2	; 0x02
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	9c 81       	ldd	r25, Y+4	; 0x04
     660:	22 e0       	ldi	r18, 0x02	; 2
     662:	4a e9       	ldi	r20, 0x9A	; 154
     664:	53 e0       	ldi	r21, 0x03	; 3
     666:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <ftos>
		UART_uint8_tSendString( au8_AccountBalance);
     66a:	8a e9       	ldi	r24, 0x9A	; 154
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
		i++;
     672:	1f 5f       	subi	r17, 0xFF	; 255
     674:	01 c0       	rjmp	.+2      	; 0x678 <ADMIN_GetAccount+0xba>
     676:	10 e0       	ldi	r17, 0x00	; 0
	if (! Check_WrittenAddresses())
	{
		UART_uint8_tSendString( STRING_MEMORY_EMPTY);
		return;
	}
	while (i < count)
     678:	1f 15       	cp	r17, r15
     67a:	08 f4       	brcc	.+2      	; 0x67e <ADMIN_GetAccount+0xc0>
     67c:	b5 cf       	rjmp	.-150    	; 0x5e8 <ADMIN_GetAccount+0x2a>
		UART_vdSendByte( BACKSPACE);
		ftos(f, au8_AccountBalance, FLOATING_POINT);
		UART_uint8_tSendString( au8_AccountBalance);
		i++;
	}
	UART_uint8_tSendString( STRING_WELCOME_END);
     67e:	8a e7       	ldi	r24, 0x7A	; 122
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
}
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	08 95       	ret

0000069a <ADMIN_SetAccount>:



void ADMIN_SetAccount(void)
{
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <ADMIN_SetAccount+0xa>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <ADMIN_SetAccount+0xc>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
	float32_t ufloat_AccountBalance;
	uint8_t count = Get_WrittenAddresses();
     6aa:	0e 94 30 02 	call	0x460	; 0x460 <Get_WrittenAddresses>
     6ae:	18 2f       	mov	r17, r24
	uint8_t temp = count;
	if (count == MAX_ACCOUNT_NO)
     6b0:	88 33       	cpi	r24, 0x38	; 56
     6b2:	29 f4       	brne	.+10     	; 0x6be <ADMIN_SetAccount+0x24>
	{
		UART_uint8_tSendString( STRING_MEMORY_FULL);
     6b4:	89 ec       	ldi	r24, 0xC9	; 201
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
     6bc:	62 c0       	rjmp	.+196    	; 0x782 <ADMIN_SetAccount+0xe8>
		return;
	}
	while (TRUE)
	{
		UART_uint8_tSendString( STRING_ENTER_PAN);
     6be:	8c ed       	ldi	r24, 0xDC	; 220
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
		UART_vdSendByte( BACKSPACE);
     6c6:	88 e0       	ldi	r24, 0x08	; 8
     6c8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
		UART_uint8_tGetString( au8_PANNumber);
     6cc:	8e e9       	ldi	r24, 0x9E	; 158
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	0e 94 0f 0b 	call	0x161e	; 0x161e <UART_uint8_tGetString>
		if ((findLength(au8_PANNumber) != PAN_BYTES_NO))
     6d4:	8e e9       	ldi	r24, 0x9E	; 158
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <findLength>
     6dc:	69 30       	cpi	r22, 0x09	; 9
     6de:	71 05       	cpc	r23, r1
     6e0:	81 05       	cpc	r24, r1
     6e2:	91 05       	cpc	r25, r1
     6e4:	29 f0       	breq	.+10     	; 0x6f0 <ADMIN_SetAccount+0x56>
		{
			UART_uint8_tSendString( STRING_INVALID_PAN);
     6e6:	84 ef       	ldi	r24, 0xF4	; 244
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
			continue;
     6ee:	e7 cf       	rjmp	.-50     	; 0x6be <ADMIN_SetAccount+0x24>
		}
		else if (Check_PANExists(temp)) continue;
     6f0:	81 2f       	mov	r24, r17
     6f2:	0e 94 56 02 	call	0x4ac	; 0x4ac <Check_PANExists>
     6f6:	81 11       	cpse	r24, r1
     6f8:	e2 cf       	rjmp	.-60     	; 0x6be <ADMIN_SetAccount+0x24>
		else break;
	}
	au8_PANAddress = (count * TOTAL_FRAME_NO) + ACCOUNTS_ADDR;
     6fa:	91 2f       	mov	r25, r17
     6fc:	99 0f       	add	r25, r25
     6fe:	89 2f       	mov	r24, r25
     700:	88 0f       	add	r24, r24
     702:	88 0f       	add	r24, r24
     704:	88 0f       	add	r24, r24
     706:	89 1b       	sub	r24, r25
     708:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <au8_PANAddress>
	au8_SPACEAddress = au8_PANAddress + PAN_BYTES_NO;
     70c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <au8_PANAddress>
     710:	87 5f       	subi	r24, 0xF7	; 247
     712:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <au8_SPACEAddress>
	au8_AccountBalanceAddress = au8_SPACEAddress + SPACE_BYTES_NO;
     716:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <au8_SPACEAddress>
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <au8_AccountBalanceAddress>
	EEPROM_WriteBytes(EEPROM_CH, ACCOUNTS_BLOCK, au8_PANAddress, au8_PANNumber, PAN_BYTES_NO);
     720:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <au8_PANAddress>
     724:	09 e0       	ldi	r16, 0x09	; 9
     726:	2e e9       	ldi	r18, 0x9E	; 158
     728:	33 e0       	ldi	r19, 0x03	; 3
     72a:	66 ea       	ldi	r22, 0xA6	; 166
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	0e 94 c9 07 	call	0xf92	; 0xf92 <EEPROM_WriteBytes>
	EEPROM_Write(EEPROM_CH, ACCOUNTS_BLOCK,au8_SPACEAddress, END_OF_STRING);
     732:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <au8_SPACEAddress>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	66 ea       	ldi	r22, 0xA6	; 166
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 72 07 	call	0xee4	; 0xee4 <EEPROM_Write>
	UART_uint8_tSendString( STRING_ENTER_ACCOUNT);
     740:	89 e2       	ldi	r24, 0x29	; 41
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_vdSendByte( BACKSPACE);
     748:	88 e0       	ldi	r24, 0x08	; 8
     74a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
	UART_uint8_tGetString( au8_AccountBalance);
     74e:	8a e9       	ldi	r24, 0x9A	; 154
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	0e 94 0f 0b 	call	0x161e	; 0x161e <UART_uint8_tGetString>
	ufloat_AccountBalance = stof(au8_AccountBalance);
     756:	8a e9       	ldi	r24, 0x9A	; 154
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 65 01 	call	0x2ca	; 0x2ca <stof>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
	EEPROM_WriteBytes(EEPROM_CH, ACCOUNTS_BLOCK, au8_AccountBalanceAddress, (uint8_t *)&ufloat_AccountBalance, MAX_ACCOUNT_BYTES_NO);
     766:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <au8_AccountBalanceAddress>
     76a:	04 e0       	ldi	r16, 0x04	; 4
     76c:	9e 01       	movw	r18, r28
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	3f 4f       	sbci	r19, 0xFF	; 255
     772:	66 ea       	ldi	r22, 0xA6	; 166
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	0e 94 c9 07 	call	0xf92	; 0xf92 <EEPROM_WriteBytes>
	++count;
	Set_WrittenAddresses(count);
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	81 0f       	add	r24, r17
     77e:	0e 94 15 02 	call	0x42a	; 0x42a <Set_WrittenAddresses>
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <ADMIN_SetMaxBalance>:
void ADMIN_SetMaxBalance(void)
{
     794:	0f 93       	push	r16
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	00 d0       	rcall	.+0      	; 0x79c <ADMIN_SetMaxBalance+0x8>
     79c:	00 d0       	rcall	.+0      	; 0x79e <ADMIN_SetMaxBalance+0xa>
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
	float32_t ufloat_MaximumAccount = 0.0;
     7a2:	19 82       	std	Y+1, r1	; 0x01
     7a4:	1a 82       	std	Y+2, r1	; 0x02
     7a6:	1b 82       	std	Y+3, r1	; 0x03
     7a8:	1c 82       	std	Y+4, r1	; 0x04
	UART_uint8_tSendString( STRING_MAX_ACCOUNT);
     7aa:	85 e4       	ldi	r24, 0x45	; 69
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_vdSendByte( BACKSPACE);
     7b2:	88 e0       	ldi	r24, 0x08	; 8
     7b4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
	UART_uint8_tGetString( au8_AccountBalance);
     7b8:	8a e9       	ldi	r24, 0x9A	; 154
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 0f 0b 	call	0x161e	; 0x161e <UART_uint8_tGetString>
	ufloat_MaximumAccount = stof(au8_AccountBalance);
     7c0:	8a e9       	ldi	r24, 0x9A	; 154
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	0e 94 65 01 	call	0x2ca	; 0x2ca <stof>
     7c8:	69 83       	std	Y+1, r22	; 0x01
     7ca:	7a 83       	std	Y+2, r23	; 0x02
     7cc:	8b 83       	std	Y+3, r24	; 0x03
     7ce:	9c 83       	std	Y+4, r25	; 0x04
	if (ufloat_MaximumAccount < MAX_BALANCE_NO)
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	3c e3       	ldi	r19, 0x3C	; 60
     7d4:	4c e1       	ldi	r20, 0x1C	; 28
     7d6:	56 e4       	ldi	r21, 0x46	; 70
     7d8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__cmpsf2>
     7dc:	88 23       	and	r24, r24
     7de:	54 f4       	brge	.+20     	; 0x7f4 <ADMIN_SetMaxBalance+0x60>
	{
		EEPROM_WriteBytes(EEPROM_CH, MAX_ACCOUNT_BLOCK,MAX_ACCOUNT_ADDR, (uint8_t *)&ufloat_MaximumAccount, MAX_ACCOUNT_BYTES_NO);
     7e0:	04 e0       	ldi	r16, 0x04	; 4
     7e2:	9e 01       	movw	r18, r28
     7e4:	2f 5f       	subi	r18, 0xFF	; 255
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	62 ea       	ldi	r22, 0xA2	; 162
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 c9 07 	call	0xf92	; 0xf92 <EEPROM_WriteBytes>
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <ADMIN_SetMaxBalance+0x68>
	}
	else
	{
		UART_uint8_tSendString( STRING_INVALID_MAX_ACCOUNT);
     7f4:	80 e6       	ldi	r24, 0x60	; 96
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	}
	
}
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <ADMIN_GetMaxBalance>:

void ADMIN_GetMaxBalance(void)
{
     80c:	0f 93       	push	r16
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	00 d0       	rcall	.+0      	; 0x814 <ADMIN_GetMaxBalance+0x8>
     814:	00 d0       	rcall	.+0      	; 0x816 <ADMIN_GetMaxBalance+0xa>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
	float32_t f;
	EEPROM_ReadBytes(EEPROM_CH, MAX_ACCOUNT_BLOCK, MAX_ACCOUNT_ADDR, (uint8_t *) &f, MAX_ACCOUNT_BYTES_NO);
     81a:	04 e0       	ldi	r16, 0x04	; 4
     81c:	9e 01       	movw	r18, r28
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	62 ea       	ldi	r22, 0xA2	; 162
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
	ftos(f, au8_AccountBalance, FLOATING_POINT);
     82c:	69 81       	ldd	r22, Y+1	; 0x01
     82e:	7a 81       	ldd	r23, Y+2	; 0x02
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	22 e0       	ldi	r18, 0x02	; 2
     836:	4a e9       	ldi	r20, 0x9A	; 154
     838:	53 e0       	ldi	r21, 0x03	; 3
     83a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <ftos>
	UART_uint8_tSendString( au8_AccountBalance);
     83e:	8a e9       	ldi	r24, 0x9A	; 154
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	UART_uint8_tSendString( STRING_WELCOME_END);
     846:	8a e7       	ldi	r24, 0x7A	; 122
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
}
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <ADMIN_Mode>:

void ADMIN_Mode(void)
{
	uint8_t u8_choice;
// 	Reset_WrittenAddresses();
	Set_PinData();
     85e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Set_PinData>
	ADMIN_Authenticate();
     862:	0e 94 95 02 	call	0x52a	; 0x52a <ADMIN_Authenticate>
	while(1)
	{
		u8_choice = ADMIN_Interface();
     866:	0e 94 b2 02 	call	0x564	; 0x564 <ADMIN_Interface>
		if (u8_choice == OPTION_EXIT)
     86a:	85 33       	cpi	r24, 0x35	; 53
     86c:	29 f4       	brne	.+10     	; 0x878 <__stack+0x19>
		{
			UART_uint8_tSendString( STRING_EXIT);
     86e:	8a e7       	ldi	r24, 0x7A	; 122
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
		else if (u8_choice == OPTION_GET_CUSTOMER_DATA) ADMIN_GetAccount();
		else if (u8_choice == OPTION_SET_MAX_ACCOUNT) ADMIN_SetMaxBalance();
		else if (u8_choice == OPTION_GET_MAX_ACCOUNT) ADMIN_GetMaxBalance();
		else UART_uint8_tSendString( STRING_INVALID_CHOICE);
	}
}
     876:	08 95       	ret
		if (u8_choice == OPTION_EXIT)
		{
			UART_uint8_tSendString( STRING_EXIT);
			break;
		}
		else if (u8_choice == OPTION_SET_CUSTOMER_DATA) ADMIN_SetAccount();
     878:	81 33       	cpi	r24, 0x31	; 49
     87a:	19 f4       	brne	.+6      	; 0x882 <__stack+0x23>
     87c:	0e 94 4d 03 	call	0x69a	; 0x69a <ADMIN_SetAccount>
     880:	f2 cf       	rjmp	.-28     	; 0x866 <__stack+0x7>
		else if (u8_choice == OPTION_GET_CUSTOMER_DATA) ADMIN_GetAccount();
     882:	82 33       	cpi	r24, 0x32	; 50
     884:	19 f4       	brne	.+6      	; 0x88c <__stack+0x2d>
     886:	0e 94 df 02 	call	0x5be	; 0x5be <ADMIN_GetAccount>
     88a:	ed cf       	rjmp	.-38     	; 0x866 <__stack+0x7>
		else if (u8_choice == OPTION_SET_MAX_ACCOUNT) ADMIN_SetMaxBalance();
     88c:	83 33       	cpi	r24, 0x33	; 51
     88e:	19 f4       	brne	.+6      	; 0x896 <__stack+0x37>
     890:	0e 94 ca 03 	call	0x794	; 0x794 <ADMIN_SetMaxBalance>
     894:	e8 cf       	rjmp	.-48     	; 0x866 <__stack+0x7>
		else if (u8_choice == OPTION_GET_MAX_ACCOUNT) ADMIN_GetMaxBalance();
     896:	84 33       	cpi	r24, 0x34	; 52
     898:	19 f4       	brne	.+6      	; 0x8a0 <__stack+0x41>
     89a:	0e 94 06 04 	call	0x80c	; 0x80c <ADMIN_GetMaxBalance>
     89e:	e3 cf       	rjmp	.-58     	; 0x866 <__stack+0x7>
		else UART_uint8_tSendString( STRING_INVALID_CHOICE);
     8a0:	88 e9       	ldi	r24, 0x98	; 152
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
     8a8:	de cf       	rjmp	.-68     	; 0x866 <__stack+0x7>

000008aa <System_Init>:
volatile static uint8_t au8_PANAddress, au8_SPACEAddress, au8_AccountBalanceAddress;


void System_Init()
{
	UART_vdInit();
     8aa:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <UART_vdInit>
	LCD_init();
     8ae:	0e 94 89 08 	call	0x1112	; 0x1112 <LCD_init>
	SPI_vdInit();
     8b2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <SPI_vdInit>
	I2C_Init(I2C_CH_0);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 85 0a 	call	0x150a	; 0x150a <I2C_Init>
	EEPROM_Init(EEPROM_CH_0);
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	0e 94 24 07 	call	0xe48	; 0xe48 <EEPROM_Init>
	ADC_init();
     8c2:	0e 94 6d 09 	call	0x12da	; 0x12da <ADC_init>
	DC_MotorInit();
     8c6:	0e 94 12 07 	call	0xe24	; 0xe24 <DC_MotorInit>
	BUTTON_init();
     8ca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <BUTTON_init>
	DIO_setPinDirection(PortB,Pin4,OUTPUT);
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	64 e0       	ldi	r22, 0x04	; 4
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_setPinDirection>
     8d8:	08 95       	ret

000008da <displayTemp>:
}

void displayTemp()
{

	LCD_clearScreen();
     8da:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
	temp = ADC_readChannel(0); /* read channel two where the temp sensor is connect */
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <ADC_readChannel>
	/********/
	temp = (temp*150*5)/(1023*1.5); 		/* calculate the temp from the ADC value*/
     8e4:	9c 01       	movw	r18, r24
     8e6:	ae ee       	ldi	r26, 0xEE	; 238
     8e8:	b2 e0       	ldi	r27, 0x02	; 2
     8ea:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__umulhisi3>
     8ee:	0e 94 92 0c 	call	0x1924	; 0x1924 <__floatunsisf>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 ed       	ldi	r19, 0xD0	; 208
     8f6:	4f eb       	ldi	r20, 0xBF	; 191
     8f8:	54 e4       	ldi	r21, 0x44	; 68
     8fa:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__divsf3>
     8fe:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fixunssfsi>
     902:	60 93 6d 06 	sts	0x066D, r22	; 0x80066d <temp>
     906:	70 93 6e 06 	sts	0x066E, r23	; 0x80066e <temp+0x1>
     90a:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <temp+0x2>
     90e:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <temp+0x3>
	LCD_goToRowColumn(0,0);
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_goToRowColumn>
	LCD_displayString("Temp= ");
     91a:	8b eb       	ldi	r24, 0xBB	; 187
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
	LCD_voidWriteNumber(temp); /* display the temp on LCD screen */
     922:	60 91 6d 06 	lds	r22, 0x066D	; 0x80066d <temp>
     926:	70 91 6e 06 	lds	r23, 0x066E	; 0x80066e <temp+0x1>
     92a:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <temp+0x2>
     92e:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <temp+0x3>
     932:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_voidWriteNumber>
	LCD_displayString(" ");
     936:	83 e4       	ldi	r24, 0x43	; 67
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
	LCD_goToRowColumn(0,9);
     93e:	69 e0       	ldi	r22, 0x09	; 9
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_goToRowColumn>
	LCD_displayCharacter('C');
     946:	83 e4       	ldi	r24, 0x43	; 67
     948:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_displayCharacter>
	LCD_displayStringRowColumn(1, 0, "PRESS 3 TO EXIT");
     94c:	42 ec       	ldi	r20, 0xC2	; 194
     94e:	52 e0       	ldi	r21, 0x02	; 2
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0e 94 09 09 	call	0x1212	; 0x1212 <LCD_displayStringRowColumn>
	while(KeyPad_getPressedKey()!='3');
     958:	0e 94 04 08 	call	0x1008	; 0x1008 <KeyPad_getPressedKey>
     95c:	83 33       	cpi	r24, 0x33	; 51
     95e:	e1 f7       	brne	.-8      	; 0x958 <displayTemp+0x7e>
	LCD_clearScreen();
     960:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
     964:	08 95       	ret

00000966 <serverCheck>:

	
}

float32_t serverCheck(uint8_t * recPan)
{
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	00 d0       	rcall	.+0      	; 0x974 <serverCheck+0xe>
     974:	00 d0       	rcall	.+0      	; 0x976 <serverCheck+0x10>
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	7c 01       	movw	r14, r24
	uint32_t Balance=0;
	uint8_t i = 0;
	float32_t f;
	uint8_t count = Get_WrittenAddresses();
     97c:	0e 94 30 02 	call	0x460	; 0x460 <Get_WrittenAddresses>
     980:	18 2f       	mov	r17, r24
	if (! Check_WrittenAddresses())
     982:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Check_WrittenAddresses>
     986:	89 2b       	or	r24, r25
     988:	b1 f5       	brne	.+108    	; 0x9f6 <serverCheck+0x90>
     98a:	3b c0       	rjmp	.+118    	; 0xa02 <serverCheck+0x9c>
	{
		return 0;
	}
	while (i < count)
	{
		au8_PANAddress = (i* TOTAL_FRAME_NO) + ACCOUNTS_ADDR;
     98c:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <au8_PANAddress>
		au8_SPACEAddress = au8_PANAddress + PAN_BYTES_NO;
     990:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <au8_PANAddress>
     994:	87 5f       	subi	r24, 0xF7	; 247
     996:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <au8_SPACEAddress>
		au8_AccountBalanceAddress = au8_SPACEAddress + SPACE_BYTES_NO;
     99a:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <au8_SPACEAddress>
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <au8_AccountBalanceAddress>
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK,au8_PANAddress, au8_PANNumber, PAN_BYTES_NO);
     9a4:	40 91 da 05 	lds	r20, 0x05DA	; 0x8005da <au8_PANAddress>
     9a8:	09 e0       	ldi	r16, 0x09	; 9
     9aa:	2f ed       	ldi	r18, 0xDF	; 223
     9ac:	35 e0       	ldi	r19, 0x05	; 5
     9ae:	66 ea       	ldi	r22, 0xA6	; 166
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
		if (StringCompare(au8_PANNumber, recPan)) break;
     9b6:	b7 01       	movw	r22, r14
     9b8:	8f ed       	ldi	r24, 0xDF	; 223
     9ba:	95 e0       	ldi	r25, 0x05	; 5
     9bc:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <StringCompare>
     9c0:	81 11       	cpse	r24, r1
     9c2:	23 c0       	rjmp	.+70     	; 0xa0a <serverCheck+0xa4>
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK, au8_AccountBalanceAddress, (uint8_t *) &f, MAX_ACCOUNT_BYTES_NO);
     9c4:	40 91 d8 05 	lds	r20, 0x05D8	; 0x8005d8 <au8_AccountBalanceAddress>
     9c8:	04 e0       	ldi	r16, 0x04	; 4
     9ca:	9e 01       	movw	r18, r28
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	66 ea       	ldi	r22, 0xA6	; 166
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
		ftos(f, au8_AccountBalance, FLOATING_POINT);
     9d8:	69 81       	ldd	r22, Y+1	; 0x01
     9da:	7a 81       	ldd	r23, Y+2	; 0x02
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	22 e0       	ldi	r18, 0x02	; 2
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	4b ed       	ldi	r20, 0xDB	; 219
     9e6:	55 e0       	ldi	r21, 0x05	; 5
     9e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <ftos>
		i++;
		return f;
     9ec:	69 81       	ldd	r22, Y+1	; 0x01
     9ee:	7a 81       	ldd	r23, Y+2	; 0x02
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	9c 81       	ldd	r25, Y+4	; 0x04
     9f4:	0d c0       	rjmp	.+26     	; 0xa10 <serverCheck+0xaa>
	uint8_t count = Get_WrittenAddresses();
	if (! Check_WrittenAddresses())
	{
		return 0;
	}
	while (i < count)
     9f6:	11 11       	cpse	r17, r1
     9f8:	c9 cf       	rjmp	.-110    	; 0x98c <serverCheck+0x26>
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK, au8_AccountBalanceAddress, (uint8_t *) &f, MAX_ACCOUNT_BYTES_NO);
		ftos(f, au8_AccountBalance, FLOATING_POINT);
		i++;
		return f;
	}
	return 0;
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	cb 01       	movw	r24, r22
     a00:	07 c0       	rjmp	.+14     	; 0xa10 <serverCheck+0xaa>
	uint8_t i = 0;
	float32_t f;
	uint8_t count = Get_WrittenAddresses();
	if (! Check_WrittenAddresses())
	{
		return 0;
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	cb 01       	movw	r24, r22
     a08:	03 c0       	rjmp	.+6      	; 0xa10 <serverCheck+0xaa>
		EEPROM_ReadBytes(EEPROM_CH, ACCOUNTS_BLOCK, au8_AccountBalanceAddress, (uint8_t *) &f, MAX_ACCOUNT_BYTES_NO);
		ftos(f, au8_AccountBalance, FLOATING_POINT);
		i++;
		return f;
	}
	return 0;
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	cb 01       	movw	r24, r22
}
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	08 95       	ret

00000a26 <InsertCard>:


}
float32_t max_balance;
void InsertCard()
{
     a26:	8f 92       	push	r8
     a28:	9f 92       	push	r9
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	2e 97       	sbiw	r28, 0x0e	; 14
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
	float32_t max_balance;
	float32_t amountavailable;
	float32_t ammountneeded;
	float32_t amountneeded2=0;
	uint8_t panNeeded[10];
	recieved=3;
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <recieved>
	LCD_clearScreen();
     a54:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
	LCD_displayString("Verify card");
     a58:	82 ed       	ldi	r24, 0xD2	; 210
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
	while((BUTTON_checkStatus(ButtonCard))==0);
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	0e 94 02 07 	call	0xe04	; 0xe04 <BUTTON_checkStatus>
     a66:	88 23       	and	r24, r24
     a68:	d9 f3       	breq	.-10     	; 0xa60 <InsertCard+0x3a>
	
	LCD_clearScreen();
     a6a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
	LCD_displayString("Please enter PIN");
     a6e:	8e ed       	ldi	r24, 0xDE	; 222
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
	key=KeyPad_getPressedKey();
     a76:	0e 94 04 08 	call	0x1008	; 0x1008 <KeyPad_getPressedKey>
     a7a:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <key>
	LCD_clearScreen();
     a7e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
	for(uint8_t i=0;i<4;i++)
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	12 c0       	rjmp	.+36     	; 0xaaa <InsertCard+0x84>
	{
		LCD_displayString("*");
     a86:	85 ea       	ldi	r24, 0xA5	; 165
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
		Pindata[i]=key;
     a8e:	e1 2f       	mov	r30, r17
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	e5 56       	subi	r30, 0x65	; 101
     a94:	f9 4f       	sbci	r31, 0xF9	; 249
     a96:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <key>
     a9a:	80 83       	st	Z, r24
		if(i<3)
     a9c:	13 30       	cpi	r17, 0x03	; 3
     a9e:	20 f4       	brcc	.+8      	; 0xaa8 <InsertCard+0x82>
		key=KeyPad_getPressedKey();
     aa0:	0e 94 04 08 	call	0x1008	; 0x1008 <KeyPad_getPressedKey>
     aa4:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <key>
	
	LCD_clearScreen();
	LCD_displayString("Please enter PIN");
	key=KeyPad_getPressedKey();
	LCD_clearScreen();
	for(uint8_t i=0;i<4;i++)
     aa8:	1f 5f       	subi	r17, 0xFF	; 255
     aaa:	14 30       	cpi	r17, 0x04	; 4
     aac:	60 f3       	brcs	.-40     	; 0xa86 <InsertCard+0x60>
		LCD_displayString("*");
		Pindata[i]=key;
		if(i<3)
		key=KeyPad_getPressedKey();
	}
	DIO_writePin(PortB,Pin4,LOW);
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	64 e0       	ldi	r22, 0x04	; 4
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	0e 94 04 0a 	call	0x1408	; 0x1408 <DIO_writePin>
	recieved=SPI_MasterTransmit('P');
     ab8:	80 e5       	ldi	r24, 0x50	; 80
     aba:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SPI_MasterTransmit>
     abe:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <recieved>
	for(uint32_t i=0;i<500000;i++);
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	dc 01       	movw	r26, r24
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <InsertCard+0xaa>
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	a1 1d       	adc	r26, r1
     ace:	b1 1d       	adc	r27, r1
     ad0:	80 32       	cpi	r24, 0x20	; 32
     ad2:	21 ea       	ldi	r18, 0xA1	; 161
     ad4:	92 07       	cpc	r25, r18
     ad6:	27 e0       	ldi	r18, 0x07	; 7
     ad8:	a2 07       	cpc	r26, r18
     ada:	b1 05       	cpc	r27, r1
     adc:	b0 f3       	brcs	.-20     	; 0xaca <InsertCard+0xa4>
	recieved=SPI_MasterTransmit('P');
     ade:	80 e5       	ldi	r24, 0x50	; 80
     ae0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SPI_MasterTransmit>
     ae4:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <recieved>
	for(uint8_t i=0;i<4;i++)
     ae8:	10 e0       	ldi	r17, 0x00	; 0
     aea:	1c c0       	rjmp	.+56     	; 0xb24 <InsertCard+0xfe>
	{
		DIO_writePin(PortB,Pin4,LOW);
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	64 e0       	ldi	r22, 0x04	; 4
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	0e 94 04 0a 	call	0x1408	; 0x1408 <DIO_writePin>
		recieved=SPI_MasterTransmit(Pindata[i]);
     af6:	e1 2f       	mov	r30, r17
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	e5 56       	subi	r30, 0x65	; 101
     afc:	f9 4f       	sbci	r31, 0xF9	; 249
     afe:	80 81       	ld	r24, Z
     b00:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SPI_MasterTransmit>
     b04:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <recieved>
		for(uint32_t i=0;i<1000;i++);
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	dc 01       	movw	r26, r24
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <InsertCard+0xf0>
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	a1 1d       	adc	r26, r1
     b14:	b1 1d       	adc	r27, r1
     b16:	88 3e       	cpi	r24, 0xE8	; 232
     b18:	23 e0       	ldi	r18, 0x03	; 3
     b1a:	92 07       	cpc	r25, r18
     b1c:	a1 05       	cpc	r26, r1
     b1e:	b1 05       	cpc	r27, r1
     b20:	b8 f3       	brcs	.-18     	; 0xb10 <InsertCard+0xea>
	}
	DIO_writePin(PortB,Pin4,LOW);
	recieved=SPI_MasterTransmit('P');
	for(uint32_t i=0;i<500000;i++);
	recieved=SPI_MasterTransmit('P');
	for(uint8_t i=0;i<4;i++)
     b22:	1f 5f       	subi	r17, 0xFF	; 255
     b24:	14 30       	cpi	r17, 0x04	; 4
     b26:	10 f3       	brcs	.-60     	; 0xaec <InsertCard+0xc6>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	dc 01       	movw	r26, r24
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <InsertCard+0x110>
	{
		DIO_writePin(PortB,Pin4,LOW);
		recieved=SPI_MasterTransmit(Pindata[i]);
		for(uint32_t i=0;i<1000;i++);
	}
	for(uint32_t j=0;j<500000;j++);
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	a1 1d       	adc	r26, r1
     b34:	b1 1d       	adc	r27, r1
     b36:	80 32       	cpi	r24, 0x20	; 32
     b38:	21 ea       	ldi	r18, 0xA1	; 161
     b3a:	92 07       	cpc	r25, r18
     b3c:	27 e0       	ldi	r18, 0x07	; 7
     b3e:	a2 07       	cpc	r26, r18
     b40:	b1 05       	cpc	r27, r1
     b42:	b0 f3       	brcs	.-20     	; 0xb30 <InsertCard+0x10a>
	DIO_writePin(PortB,Pin4,LOW);
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	64 e0       	ldi	r22, 0x04	; 4
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	0e 94 04 0a 	call	0x1408	; 0x1408 <DIO_writePin>
	recieved=SPI_MasterTransmit(30);
     b4e:	8e e1       	ldi	r24, 0x1E	; 30
     b50:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SPI_MasterTransmit>
     b54:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <recieved>
	LCD_clearScreen();
     b58:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
	if(recieved==1)
     b5c:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <recieved>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f0       	breq	.+2      	; 0xb66 <InsertCard+0x140>
     b64:	ae c0       	rjmp	.+348    	; 0xcc2 <InsertCard+0x29c>
	{
		
		LCD_displayString("Enter the amount");
     b66:	8f ee       	ldi	r24, 0xEF	; 239
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
		LCD_goToRowColumn(1,0);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_goToRowColumn>
		for(uint8_t i=0;i<7;i++)
     b76:	10 e0       	ldi	r17, 0x00	; 0
void InsertCard()
{
	float32_t max_balance;
	float32_t amountavailable;
	float32_t ammountneeded;
	float32_t amountneeded2=0;
     b78:	c1 2c       	mov	r12, r1
     b7a:	d1 2c       	mov	r13, r1
     b7c:	76 01       	movw	r14, r12
	if(recieved==1)
	{
		
		LCD_displayString("Enter the amount");
		LCD_goToRowColumn(1,0);
		for(uint8_t i=0;i<7;i++)
     b7e:	2b c0       	rjmp	.+86     	; 0xbd6 <InsertCard+0x1b0>
		{
			key=KeyPad_getPressedKey();
     b80:	0e 94 04 08 	call	0x1008	; 0x1008 <KeyPad_getPressedKey>
     b84:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <key>
			amount[i]=key;
     b88:	e1 2f       	mov	r30, r17
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	e9 57       	subi	r30, 0x79	; 121
     b8e:	f9 4f       	sbci	r31, 0xF9	; 249
     b90:	80 83       	st	Z, r24
			LCD_displayCharacter(key);
     b92:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_displayCharacter>
			if(i!=4)
     b96:	14 30       	cpi	r17, 0x04	; 4
     b98:	e9 f0       	breq	.+58     	; 0xbd4 <InsertCard+0x1ae>
			{
				amountneeded2=amountneeded2*10+key-'0';
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e2       	ldi	r20, 0x20	; 32
     ba0:	51 e4       	ldi	r21, 0x41	; 65
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__mulsf3>
     baa:	6b 01       	movw	r12, r22
     bac:	7c 01       	movw	r14, r24
     bae:	60 91 8e 06 	lds	r22, 0x068E	; 0x80068e <key>
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatsisf>
     bbc:	a7 01       	movw	r20, r14
     bbe:	96 01       	movw	r18, r12
     bc0:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e4       	ldi	r20, 0x40	; 64
     bca:	52 e4       	ldi	r21, 0x42	; 66
     bcc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
     bd0:	6b 01       	movw	r12, r22
     bd2:	7c 01       	movw	r14, r24
	if(recieved==1)
	{
		
		LCD_displayString("Enter the amount");
		LCD_goToRowColumn(1,0);
		for(uint8_t i=0;i<7;i++)
     bd4:	1f 5f       	subi	r17, 0xFF	; 255
     bd6:	17 30       	cpi	r17, 0x07	; 7
     bd8:	98 f2       	brcs	.-90     	; 0xb80 <InsertCard+0x15a>
			if(i!=4)
			{
				amountneeded2=amountneeded2*10+key-'0';
			}
		}
		amountneeded2/=100;
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	48 ec       	ldi	r20, 0xC8	; 200
     be0:	52 e4       	ldi	r21, 0x42	; 66
     be2:	c7 01       	movw	r24, r14
     be4:	b6 01       	movw	r22, r12
     be6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__divsf3>
     bea:	4b 01       	movw	r8, r22
     bec:	5c 01       	movw	r10, r24
		
		EEPROM_ReadBytes(EEPROM_CH, MAX_ACCOUNT_BLOCK, MAX_ACCOUNT_ADDR, (uint8_t *) &max_balance, MAX_ACCOUNT_BYTES_NO);
     bee:	04 e0       	ldi	r16, 0x04	; 4
     bf0:	9e 01       	movw	r18, r28
     bf2:	2f 5f       	subi	r18, 0xFF	; 255
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	62 ea       	ldi	r22, 0xA2	; 162
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	0e 94 a3 07 	call	0xf46	; 0xf46 <EEPROM_ReadBytes>
		if(amountneeded2>max_balance)
     c00:	29 81       	ldd	r18, Y+1	; 0x01
     c02:	3a 81       	ldd	r19, Y+2	; 0x02
     c04:	4b 81       	ldd	r20, Y+3	; 0x03
     c06:	5c 81       	ldd	r21, Y+4	; 0x04
     c08:	c5 01       	movw	r24, r10
     c0a:	b4 01       	movw	r22, r8
     c0c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__gesf2>
     c10:	18 16       	cp	r1, r24
     c12:	34 f5       	brge	.+76     	; 0xc60 <InsertCard+0x23a>
		{
			LCD_clearScreen();
     c14:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
			LCD_displayString("above max value");
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
			SPI_MasterTransmit('W');
     c20:	87 e5       	ldi	r24, 0x57	; 87
     c22:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SPI_MasterTransmit>
			_delay_ms(3000);
     c26:	68 eb       	ldi	r22, 0xB8	; 184
     c28:	7b e0       	ldi	r23, 0x0B	; 11
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
			LCD_clearScreen();
     c32:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
     c36:	60 c0       	rjmp	.+192    	; 0xcf8 <InsertCard+0x2d2>
		}
		else
		{
			for(uint8_t i=0;i<9;i++)
			{
				panNeeded[i]=SPI_MasterTransmit(1);
     c38:	e1 2e       	mov	r14, r17
     c3a:	f1 2c       	mov	r15, r1
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SPI_MasterTransmit>
     c42:	e5 e0       	ldi	r30, 0x05	; 5
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	ee 0d       	add	r30, r14
     c4c:	ff 1d       	adc	r31, r15
     c4e:	80 83       	st	Z, r24
				_delay_ms(10);
     c50:	6a e0       	ldi	r22, 0x0A	; 10
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
			_delay_ms(3000);
			LCD_clearScreen();
		}
		else
		{
			for(uint8_t i=0;i<9;i++)
     c5c:	1f 5f       	subi	r17, 0xFF	; 255
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <InsertCard+0x23c>
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	19 30       	cpi	r17, 0x09	; 9
     c64:	48 f3       	brcs	.-46     	; 0xc38 <InsertCard+0x212>
			{
				panNeeded[i]=SPI_MasterTransmit(1);
				_delay_ms(10);
			}
			
			amountavailable=serverCheck(panNeeded);
     c66:	ce 01       	movw	r24, r28
     c68:	05 96       	adiw	r24, 0x05	; 5
     c6a:	0e 94 b3 04 	call	0x966	; 0x966 <serverCheck>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
			
			if(amountneeded2>amountavailable)
     c72:	c5 01       	movw	r24, r10
     c74:	b4 01       	movw	r22, r8
     c76:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__gesf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	7c f4       	brge	.+30     	; 0xc9c <InsertCard+0x276>
			{
				LCD_clearScreen();
     c7e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
				LCD_displayString("un Sufficient");
     c82:	80 e1       	ldi	r24, 0x10	; 16
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
				_delay_ms(3000);
     c8a:	68 eb       	ldi	r22, 0xB8	; 184
     c8c:	7b e0       	ldi	r23, 0x0B	; 11
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
				LCD_clearScreen();
     c96:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
     c9a:	2e c0       	rjmp	.+92     	; 0xcf8 <InsertCard+0x2d2>
				
			}
			else
			{
				LCD_clearScreen();
     c9c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
				LCD_displayString("succeeded");
     ca0:	8e e1       	ldi	r24, 0x1E	; 30
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
				DC_MotorStart();
     ca8:	0e 94 18 07 	call	0xe30	; 0xe30 <DC_MotorStart>
				_delay_ms(3000);
     cac:	68 eb       	ldi	r22, 0xB8	; 184
     cae:	7b e0       	ldi	r23, 0x0B	; 11
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
				DC_MotorStop();
     cb8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DC_MotorStop>
				LCD_clearScreen();
     cbc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
     cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <InsertCard+0x2d2>


		}

	}
	else if (recieved==0)
     cc2:	81 11       	cpse	r24, r1
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <InsertCard+0x2ba>
	{
		LCD_displayString("wrongPassword");
     cc6:	88 e2       	ldi	r24, 0x28	; 40
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
		_delay_ms(3000);
     cce:	68 eb       	ldi	r22, 0xB8	; 184
     cd0:	7b e0       	ldi	r23, 0x0B	; 11
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
		LCD_clearScreen();
     cda:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
     cde:	0c c0       	rjmp	.+24     	; 0xcf8 <InsertCard+0x2d2>
	}
	else
	{
		LCD_displayString("invalid data");
     ce0:	86 e3       	ldi	r24, 0x36	; 54
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
		_delay_ms(3000);
     ce8:	68 eb       	ldi	r22, 0xB8	; 184
     cea:	7b e0       	ldi	r23, 0x0B	; 11
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
		LCD_clearScreen();
     cf4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
	}

	
}
     cf8:	2e 96       	adiw	r28, 0x0e	; 14
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	bf 90       	pop	r11
     d16:	af 90       	pop	r10
     d18:	9f 90       	pop	r9
     d1a:	8f 90       	pop	r8
     d1c:	08 95       	ret

00000d1e <operatingMode>:
	}
}

void operatingMode()
{
	LCD_clearScreen();
     d1e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
	LCD_displayString("1- Insert Card");
     d22:	83 e4       	ldi	r24, 0x43	; 67
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "2- Display Temp");
     d2a:	42 e5       	ldi	r20, 0x52	; 82
     d2c:	53 e0       	ldi	r21, 0x03	; 3
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	0e 94 09 09 	call	0x1212	; 0x1212 <LCD_displayStringRowColumn>
	key=KeyPad_getPressedKey();
     d36:	0e 94 04 08 	call	0x1008	; 0x1008 <KeyPad_getPressedKey>
     d3a:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <key>
	switch(key)
     d3e:	81 33       	cpi	r24, 0x31	; 49
     d40:	19 f0       	breq	.+6      	; 0xd48 <operatingMode+0x2a>
     d42:	82 33       	cpi	r24, 0x32	; 50
     d44:	21 f0       	breq	.+8      	; 0xd4e <operatingMode+0x30>
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <operatingMode+0x3a>
	{
		case '1':
		InsertCard();
     d48:	0e 94 13 05 	call	0xa26	; 0xa26 <InsertCard>

		break;
     d4c:	08 95       	ret
		case '2':
		LCD_clearScreen();
     d4e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
		displayTemp();
     d52:	0e 94 6d 04 	call	0x8da	; 0x8da <displayTemp>
		break;
     d56:	08 95       	ret
		default:
		{
			LCD_clearScreen();
     d58:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_clearScreen>
			LCD_displayString("Wrong Entry!");
     d5c:	82 e6       	ldi	r24, 0x62	; 98
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
     d64:	08 95       	ret

00000d66 <System_Update>:
	DIO_setPinDirection(PortB,Pin4,OUTPUT);
}

uint8_t System_Update()
{
	if(UART_IsDataReady())
     d66:	0e 94 2e 0b 	call	0x165c	; 0x165c <UART_IsDataReady>
     d6a:	88 23       	and	r24, r24
     d6c:	f9 f0       	breq	.+62     	; 0xdac <System_Update+0x46>
	{
		UART_uint8_tGetString(data);
     d6e:	88 e7       	ldi	r24, 0x78	; 120
     d70:	96 e0       	ldi	r25, 0x06	; 6
     d72:	0e 94 0f 0b 	call	0x161e	; 0x161e <UART_uint8_tGetString>
		if(StringCompare("ADMIN", data))
     d76:	68 e7       	ldi	r22, 0x78	; 120
     d78:	76 e0       	ldi	r23, 0x06	; 6
     d7a:	8f e6       	ldi	r24, 0x6F	; 111
     d7c:	93 e0       	ldi	r25, 0x03	; 3
     d7e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <StringCompare>
     d82:	88 23       	and	r24, r24
     d84:	21 f0       	breq	.+8      	; 0xd8e <System_Update+0x28>
		{
			ADMIN_Mode();
     d86:	0e 94 2f 04 	call	0x85e	; 0x85e <ADMIN_Mode>
			return 0;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	08 95       	ret
		}
		else if(StringCompare("USER", data))
     d8e:	68 e7       	ldi	r22, 0x78	; 120
     d90:	76 e0       	ldi	r23, 0x06	; 6
     d92:	85 e7       	ldi	r24, 0x75	; 117
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <StringCompare>
     d9a:	88 23       	and	r24, r24
     d9c:	19 f0       	breq	.+6      	; 0xda4 <System_Update+0x3e>
		operatingMode();
     d9e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <operatingMode>
     da2:	04 c0       	rjmp	.+8      	; 0xdac <System_Update+0x46>
		else
		UART_uint8_tSendString("wrong command");
     da4:	8a e7       	ldi	r24, 0x7A	; 122
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <UART_uint8_tSendString>
	}
}
     dac:	08 95       	ret

00000dae <main>:



int main(void)
{
	System_Init();
     dae:	0e 94 55 04 	call	0x8aa	; 0x8aa <System_Init>
	while(1)
	{
		System_Update();
     db2:	0e 94 b3 06 	call	0xd66	; 0xd66 <System_Update>
     db6:	fd cf       	rjmp	.-6      	; 0xdb2 <main+0x4>

00000db8 <_delay_ms>:

#define Z 9200
#define M 5300

void _delay_ms(uint32_t DelayValue)
{
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
	uint32_t i = 0;
	uint32_t count = (DelayValue*1000000 - Z)/(M+125);
     dbc:	60 e4       	ldi	r22, 0x40	; 64
     dbe:	72 e4       	ldi	r23, 0x42	; 66
     dc0:	8f e0       	ldi	r24, 0x0F	; 15
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__mulsi3>
     dc8:	60 5f       	subi	r22, 0xF0	; 240
     dca:	73 42       	sbci	r23, 0x23	; 35
     dcc:	81 09       	sbc	r24, r1
     dce:	91 09       	sbc	r25, r1
     dd0:	21 e3       	ldi	r18, 0x31	; 49
     dd2:	35 e1       	ldi	r19, 0x15	; 21
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
#define Z 9200
#define M 5300

void _delay_ms(uint32_t DelayValue)
{
	uint32_t i = 0;
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	dc 01       	movw	r26, r24
	uint32_t count = (DelayValue*1000000 - Z)/(M+125);
	for(;i < count ; i++)
     de2:	04 c0       	rjmp	.+8      	; 0xdec <_delay_ms+0x34>
		asm("NOP");
     de4:	00 00       	nop

void _delay_ms(uint32_t DelayValue)
{
	uint32_t i = 0;
	uint32_t count = (DelayValue*1000000 - Z)/(M+125);
	for(;i < count ; i++)
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	a1 1d       	adc	r26, r1
     dea:	b1 1d       	adc	r27, r1
     dec:	82 17       	cp	r24, r18
     dee:	93 07       	cpc	r25, r19
     df0:	a4 07       	cpc	r26, r20
     df2:	b5 07       	cpc	r27, r21
     df4:	b8 f3       	brcs	.-18     	; 0xde4 <_delay_ms+0x2c>
		asm("NOP");
}
     df6:	08 95       	ret

00000df8 <BUTTON_init>:
#include "..\..\MCAL\DIO\DIO.h"
#include "Button_INT.h"

void BUTTON_init()
{
	DIO_setPinDirection(BUTTON_CTRLPORT,Pin2,INPUT);
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	62 e0       	ldi	r22, 0x02	; 2
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_setPinDirection>
     e02:	08 95       	ret

00000e04 <BUTTON_checkStatus>:
}
sint8_t BUTTON_checkStatus(uint8_t ButtonNum)
{
	//uint8_t *value;
	if(ButtonNum<=Pin7)
     e04:	88 30       	cpi	r24, 0x08	; 8
     e06:	60 f4       	brcc	.+24     	; 0xe20 <BUTTON_checkStatus+0x1c>
	{
		//DIO_readPin(PINB,ButtonNum,value);
		 return((BIT_IS_SET(PINB,ButtonNum)));
     e08:	46 b3       	in	r20, 0x16	; 22
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	b9 01       	movw	r22, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <BUTTON_checkStatus+0x12>
     e12:	66 0f       	add	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	8a 95       	dec	r24
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <BUTTON_checkStatus+0xe>
     e1a:	cb 01       	movw	r24, r22
     e1c:	84 23       	and	r24, r20
     e1e:	08 95       	ret
		}
		return 0;*/
		
	}

	return  ButtonError;
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	08 95       	ret

00000e24 <DC_MotorInit>:
#include "..\..\MCAL\DIO\DIO.h"
#include "DC_MotorConfig.h"
#include "DC_Motor.h"
void DC_MotorInit()
{
	DIO_setPinDirection(DC_MotorPort,DCMotorPin,OUTPUT);
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_setPinDirection>
     e2e:	08 95       	ret

00000e30 <DC_MotorStart>:
	
}
void DC_MotorStart()
{
	DIO_writePin(DC_MotorPort,DCMotorPin,HIGH);
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 04 0a 	call	0x1408	; 0x1408 <DIO_writePin>
     e3a:	08 95       	ret

00000e3c <DC_MotorStop>:
}
void DC_MotorStop()
{
	DIO_writePin(DC_MotorPort,DCMotorPin,LOW);
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 04 0a 	call	0x1408	; 0x1408 <DIO_writePin>
     e46:	08 95       	ret

00000e48 <EEPROM_Init>:
{
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	39 f4       	brne	.+14     	; 0xe5a <EEPROM_Init+0x12>
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   
   /* configure i2c pins */
   e_state = I2C_Init(u8_I2C_CH);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0e 94 85 0a 	call	0x150a	; 0x150a <I2C_Init>
   /* make sure pin configuration is successful */
   if(E_I2C_SUCCESS != e_state)
     e52:	88 23       	and	r24, r24
     e54:	21 f0       	breq	.+8      	; 0xe5e <EEPROM_Init+0x16>
   {
      return E_EEPROM_I2C_ERROR;
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	08 95       	ret
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	08 95       	ret
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
}
     e60:	08 95       	ret

00000e62 <EEPROM_Read>:
* @param [out] data        -  Pointer to where to store received data.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Read(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t address, uint8_t * data)
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	39 f5       	brne	.+78     	; 0xebc <EEPROM_Read+0x5a>
     e6e:	89 01       	movw	r16, r18
     e70:	d4 2f       	mov	r29, r20
     e72:	c6 2f       	mov	r28, r22
      default:
         return E_EEPROM_INVALID_CH_NO;
   }

   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0e 94 91 0a 	call	0x1522	; 0x1522 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
     e7a:	81 11       	cpse	r24, r1
     e7c:	21 c0       	rjmp	.+66     	; 0xec0 <EEPROM_Read+0x5e>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
     e7e:	6c 2f       	mov	r22, r28
     e80:	0e 94 a8 0a 	call	0x1550	; 0x1550 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
     e84:	81 11       	cpse	r24, r1
     e86:	1e c0       	rjmp	.+60     	; 0xec4 <EEPROM_Read+0x62>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
     e88:	6d 2f       	mov	r22, r29
     e8a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
     e8e:	81 11       	cpse	r24, r1
     e90:	1b c0       	rjmp	.+54     	; 0xec8 <EEPROM_Read+0x66>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
     e92:	0e 94 9c 0a 	call	0x1538	; 0x1538 <I2C_RepeatedStart>
   if(E_I2C_SUCCESS != e_state)
     e96:	81 11       	cpse	r24, r1
     e98:	19 c0       	rjmp	.+50     	; 0xecc <EEPROM_Read+0x6a>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, memoryBlock | 1 );
     e9a:	6c 2f       	mov	r22, r28
     e9c:	61 60       	ori	r22, 0x01	; 1
     e9e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
     ea2:	81 11       	cpse	r24, r1
     ea4:	15 c0       	rjmp	.+42     	; 0xed0 <EEPROM_Read+0x6e>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
     ea6:	b8 01       	movw	r22, r16
     ea8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <I2C_ReadNoAck>
   if(E_I2C_SUCCESS != e_state)
     eac:	81 11       	cpse	r24, r1
     eae:	12 c0       	rjmp	.+36     	; 0xed4 <EEPROM_Read+0x72>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
     eb0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
     eb4:	88 23       	and	r24, r24
     eb6:	81 f0       	breq	.+32     	; 0xed8 <EEPROM_Read+0x76>
   {
      return E_EEPROM_I2C_ERROR;
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	0f c0       	rjmp	.+30     	; 0xeda <EEPROM_Read+0x78>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0d c0       	rjmp	.+26     	; 0xeda <EEPROM_Read+0x78>

   /* Set start condition */
   e_state =I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <EEPROM_Read+0x78>

   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <EEPROM_Read+0x78>

   /* Set address to read from */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	07 c0       	rjmp	.+14     	; 0xeda <EEPROM_Read+0x78>

   /* repeated start */
   e_state = I2C_RepeatedStart(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	05 c0       	rjmp	.+10     	; 0xeda <EEPROM_Read+0x78>

   /* Set first memory block address + R */
   e_state= I2C_Write(u8_I2C_CH, memoryBlock | 1 );
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <EEPROM_Read+0x78>

   /* receive data in the address */
   e_state = I2C_ReadNoAck(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <EEPROM_Read+0x78>
   {
      return E_EEPROM_I2C_ERROR;
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
     ed8:	80 e0       	ldi	r24, 0x00	; 0
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <EEPROM_Write>:
* @param [in]  data        -  Data to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_Write(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t address, uint8_t data)
{
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
   I2C_ERROR_state_t e_state;
   uint8_t u8_I2C_CH;
   
   switch(EEPROM_CH)
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	e9 f4       	brne	.+58     	; 0xf28 <EEPROM_Write+0x44>
     eee:	12 2f       	mov	r17, r18
     ef0:	d4 2f       	mov	r29, r20
     ef2:	c6 2f       	mov	r28, r22
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
   }
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	0e 94 91 0a 	call	0x1522	; 0x1522 <I2C_Start>
   if(E_I2C_SUCCESS != e_state)
     efa:	81 11       	cpse	r24, r1
     efc:	17 c0       	rjmp	.+46     	; 0xf2c <EEPROM_Write+0x48>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
     efe:	6c 2f       	mov	r22, r28
     f00:	0e 94 a8 0a 	call	0x1550	; 0x1550 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
     f04:	81 11       	cpse	r24, r1
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <EEPROM_Write+0x4c>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
     f08:	6d 2f       	mov	r22, r29
     f0a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
     f0e:	81 11       	cpse	r24, r1
     f10:	11 c0       	rjmp	.+34     	; 0xf34 <EEPROM_Write+0x50>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
     f12:	61 2f       	mov	r22, r17
     f14:	0e 94 a8 0a 	call	0x1550	; 0x1550 <I2C_Write>
   if(E_I2C_SUCCESS != e_state)
     f18:	81 11       	cpse	r24, r1
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <EEPROM_Write+0x54>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* release the bus */
   e_state = I2C_Stop(u8_I2C_CH);
     f1c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <I2C_Stop>
   if(E_I2C_SUCCESS != e_state)
     f20:	88 23       	and	r24, r24
     f22:	61 f0       	breq	.+24     	; 0xf3c <EEPROM_Write+0x58>
   {
      return E_EEPROM_I2C_ERROR;
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <EEPROM_Write+0x5a>
      case EEPROM_CH_0:
         u8_I2C_CH = EEPROM_CH_0_I2C_CH;
         break;
      #endif
      default:
         return E_EEPROM_INVALID_CH_NO;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <EEPROM_Write+0x5a>
   }
   /* Set start condition */
   e_state = I2C_Start(u8_I2C_CH);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <EEPROM_Write+0x5a>

   /* Set first memory block address + W */
   e_state = I2C_Write(u8_I2C_CH, memoryBlock);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <EEPROM_Write+0x5a>

   /* set address to write to */
   e_state = I2C_Write(u8_I2C_CH, address);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <EEPROM_Write+0x5a>

   /* writes data to the address */
   e_state = I2C_Write(u8_I2C_CH, data);
   if(E_I2C_SUCCESS != e_state)
   {
      return E_EEPROM_I2C_ERROR;
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <EEPROM_Write+0x5a>
   {
      return E_EEPROM_I2C_ERROR;
   }

   /* return success message */
   return E_EEPROM_SUCCESS;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	08 95       	ret

00000f46 <EEPROM_ReadBytes>:
* @param [in]  bytes_num   -  number of bytes to read.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_ReadBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	d8 2e       	mov	r13, r24
     f56:	16 2f       	mov	r17, r22
     f58:	d4 2f       	mov	r29, r20
     f5a:	79 01       	movw	r14, r18
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
     f5c:	c0 e0       	ldi	r28, 0x00	; 0
     f5e:	0c c0       	rjmp	.+24     	; 0xf78 <EEPROM_ReadBytes+0x32>
   {
      e_state = EEPROM_Read(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), &data[au8_BytesCounter]);
     f60:	97 01       	movw	r18, r14
     f62:	2c 0f       	add	r18, r28
     f64:	31 1d       	adc	r19, r1
     f66:	4c 2f       	mov	r20, r28
     f68:	4d 0f       	add	r20, r29
     f6a:	61 2f       	mov	r22, r17
     f6c:	8d 2d       	mov	r24, r13
     f6e:	0e 94 31 07 	call	0xe62	; 0xe62 <EEPROM_Read>
      if(E_I2C_SUCCESS != e_state)
     f72:	81 11       	cpse	r24, r1
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <EEPROM_ReadBytes+0x3a>
*/
EEPROM_ERROR_state_t EEPROM_ReadBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
     f76:	cf 5f       	subi	r28, 0xFF	; 255
     f78:	c0 17       	cp	r28, r16
     f7a:	90 f3       	brcs	.-28     	; 0xf60 <EEPROM_ReadBytes+0x1a>
         return E_EEPROM_I2C_ERROR;
      }
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <EEPROM_ReadBytes+0x3c>
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
   {
      e_state = EEPROM_Read(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), &data[au8_BytesCounter]);
      if(E_I2C_SUCCESS != e_state)
      {
         return E_EEPROM_I2C_ERROR;
     f80:	82 e0       	ldi	r24, 0x02	; 2
      }
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	08 95       	ret

00000f92 <EEPROM_WriteBytes>:
* @param [in]  bytes_num   -  number of bytes to write.
*
* @return function error state.
*/
EEPROM_ERROR_state_t EEPROM_WriteBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	d8 2e       	mov	r13, r24
     fa2:	16 2f       	mov	r17, r22
     fa4:	d4 2f       	mov	r29, r20
     fa6:	79 01       	movw	r14, r18
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
     fa8:	c0 e0       	ldi	r28, 0x00	; 0
     faa:	13 c0       	rjmp	.+38     	; 0xfd2 <EEPROM_WriteBytes+0x40>
   {
      e_state = EEPROM_Write(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), data[au8_BytesCounter]);
     fac:	f7 01       	movw	r30, r14
     fae:	ec 0f       	add	r30, r28
     fb0:	f1 1d       	adc	r31, r1
     fb2:	20 81       	ld	r18, Z
     fb4:	4c 2f       	mov	r20, r28
     fb6:	4d 0f       	add	r20, r29
     fb8:	61 2f       	mov	r22, r17
     fba:	8d 2d       	mov	r24, r13
     fbc:	0e 94 72 07 	call	0xee4	; 0xee4 <EEPROM_Write>
      if(E_I2C_SUCCESS != e_state)
     fc0:	81 11       	cpse	r24, r1
     fc2:	0b c0       	rjmp	.+22     	; 0xfda <EEPROM_WriteBytes+0x48>
      {
         return E_EEPROM_I2C_ERROR;
      }
      dummy_delay();
     fc4:	0e 94 34 0b 	call	0x1668	; 0x1668 <dummy_delay>
      dummy_delay();
     fc8:	0e 94 34 0b 	call	0x1668	; 0x1668 <dummy_delay>
	  dummy_delay();
     fcc:	0e 94 34 0b 	call	0x1668	; 0x1668 <dummy_delay>
*/
EEPROM_ERROR_state_t EEPROM_WriteBytes(uint8_t EEPROM_CH, uint8_t memoryBlock, uint8_t start_address, uint8_t * data, uint8_t bytes_num)
{
   I2C_ERROR_state_t e_state;
   
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
     fd0:	cf 5f       	subi	r28, 0xFF	; 255
     fd2:	c0 17       	cp	r28, r16
     fd4:	58 f3       	brcs	.-42     	; 0xfac <EEPROM_WriteBytes+0x1a>
      dummy_delay();
	  dummy_delay();
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <EEPROM_WriteBytes+0x4a>
   for(uint8_t au8_BytesCounter = 0 ; au8_BytesCounter < bytes_num; au8_BytesCounter++)
   {
      e_state = EEPROM_Write(EEPROM_CH, memoryBlock, (start_address + au8_BytesCounter), data[au8_BytesCounter]);
      if(E_I2C_SUCCESS != e_state)
      {
         return E_EEPROM_I2C_ERROR;
     fda:	82 e0       	ldi	r24, 0x02	; 2
   }
   
   /* return success message */
   return E_EEPROM_SUCCESS;
   
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	08 95       	ret

00000fec <KeyPad_4x3_adjustKeyNumber>:

#if (N_col == 3) 

static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
     fec:	8b 30       	cpi	r24, 0x0B	; 11
     fee:	51 f0       	breq	.+20     	; 0x1004 <KeyPad_4x3_adjustKeyNumber+0x18>
     ff0:	8c 30       	cpi	r24, 0x0C	; 12
     ff2:	21 f0       	breq	.+8      	; 0xffc <KeyPad_4x3_adjustKeyNumber+0x10>
     ff4:	8a 30       	cpi	r24, 0x0A	; 10
     ff6:	21 f4       	brne	.+8      	; 0x1000 <KeyPad_4x3_adjustKeyNumber+0x14>
	{
		case 10: return '.'; // ASCII Code of *
     ff8:	8e e2       	ldi	r24, 0x2E	; 46
     ffa:	08 95       	ret
				 break;
		case 11: return '0';
				 break;		
		case 12: return '#'; // ASCII Code of #
     ffc:	83 e2       	ldi	r24, 0x23	; 35
     ffe:	08 95       	ret
				 break;
		default: return (button_number+'0');								 						
    1000:	80 5d       	subi	r24, 0xD0	; 208
    1002:	08 95       	ret
{
	switch(button_number)
	{
		case 10: return '.'; // ASCII Code of *
				 break;
		case 11: return '0';
    1004:	80 e3       	ldi	r24, 0x30	; 48
				 break;		
		case 12: return '#'; // ASCII Code of #
				 break;
		default: return (button_number+'0');								 						
	}
} 
    1006:	08 95       	ret

00001008 <KeyPad_getPressedKey>:
uint8_t KeyPad_getPressedKey(void)
{
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	31 c0       	rjmp	.+98     	; 0x106e <KeyPad_getPressedKey+0x66>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00000010<<col);
    100c:	22 e0       	ldi	r18, 0x02	; 2
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	08 2e       	mov	r0, r24
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <KeyPad_getPressedKey+0x10>
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <KeyPad_getPressedKey+0xc>
    101c:	2a bb       	out	0x1a, r18	; 26
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00000010<<col));
    101e:	20 95       	com	r18
    1020:	2b bb       	out	0x1b, r18	; 27

			for(row=4;row<8;row++) /* loop for rows */
    1022:	94 e0       	ldi	r25, 0x04	; 4
    1024:	21 c0       	rjmp	.+66     	; 0x1068 <KeyPad_getPressedKey+0x60>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1026:	29 b3       	in	r18, 0x19	; 25
    1028:	49 2f       	mov	r20, r25
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	09 2e       	mov	r0, r25
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <KeyPad_getPressedKey+0x2e>
    1032:	35 95       	asr	r19
    1034:	27 95       	ror	r18
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <KeyPad_getPressedKey+0x2a>
    103a:	20 fd       	sbrc	r18, 0
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <KeyPad_getPressedKey+0x5e>
				{
					while(BIT_IS_CLEAR(KEYPAD_PORT_IN,row));
    103e:	29 b3       	in	r18, 0x19	; 25
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	04 2e       	mov	r0, r20
    1044:	02 c0       	rjmp	.+4      	; 0x104a <KeyPad_getPressedKey+0x42>
    1046:	35 95       	asr	r19
    1048:	27 95       	ror	r18
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <KeyPad_getPressedKey+0x3e>
    104e:	20 ff       	sbrs	r18, 0
    1050:	f6 cf       	rjmp	.-20     	; 0x103e <KeyPad_getPressedKey+0x36>
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber(((row-4)*N_col)+col+1);
    1052:	44 50       	subi	r20, 0x04	; 4
    1054:	51 09       	sbc	r21, r1
    1056:	94 2f       	mov	r25, r20
    1058:	99 0f       	add	r25, r25
    105a:	49 0f       	add	r20, r25
    105c:	84 0f       	add	r24, r20
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	0e 94 f6 07 	call	0xfec	; 0xfec <KeyPad_4x3_adjustKeyNumber>
    1064:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00000010<<col));

			for(row=4;row<8;row++) /* loop for rows */
    1066:	9f 5f       	subi	r25, 0xFF	; 255
    1068:	98 30       	cpi	r25, 0x08	; 8
    106a:	e8 f2       	brcs	.-70     	; 0x1026 <KeyPad_getPressedKey+0x1e>
uint8_t KeyPad_getPressedKey(void)
{
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	68 f2       	brcs	.-102    	; 0x100c <KeyPad_getPressedKey+0x4>
    1072:	ca cf       	rjmp	.-108    	; 0x1008 <KeyPad_getPressedKey>

00001074 <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8_t command)
{
    1074:	cf 93       	push	r28
    1076:	c8 2f       	mov	r28, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1078:	85 b3       	in	r24, 0x15	; 21
    107a:	8f 7d       	andi	r24, 0xDF	; 223
    107c:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    107e:	85 b3       	in	r24, 0x15	; 21
    1080:	8f 7b       	andi	r24, 0xBF	; 191
    1082:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Tas = 50ns */
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1090:	85 b3       	in	r24, 0x15	; 21
    1092:	80 68       	ori	r24, 0x80	; 128
    1094:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    10a2:	82 b3       	in	r24, 0x12	; 18
    10a4:	8f 70       	andi	r24, 0x0F	; 15
    10a6:	9c 2f       	mov	r25, r28
    10a8:	90 7f       	andi	r25, 0xF0	; 240
    10aa:	89 2b       	or	r24, r25
    10ac:	82 bb       	out	0x12, r24	; 18
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    10ba:	85 b3       	in	r24, 0x15	; 21
    10bc:	8f 77       	andi	r24, 0x7F	; 127
    10be:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Th = 13ns */
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    10cc:	85 b3       	in	r24, 0x15	; 21
    10ce:	80 68       	ori	r24, 0x80	; 128
    10d0:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    10de:	22 b3       	in	r18, 0x12	; 18
    10e0:	30 e1       	ldi	r19, 0x10	; 16
    10e2:	c3 9f       	mul	r28, r19
    10e4:	c0 01       	movw	r24, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	92 2f       	mov	r25, r18
    10ea:	9f 70       	andi	r25, 0x0F	; 15
    10ec:	89 2b       	or	r24, r25
    10ee:	82 bb       	out	0x12, r24	; 18
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    10fc:	85 b3       	in	r24, 0x15	; 21
    10fe:	8f 77       	andi	r24, 0x7F	; 127
    1100:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Th = 13ns */
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1112:	84 b3       	in	r24, 0x14	; 20
    1114:	80 6e       	ori	r24, 0xE0	; 224
    1116:	84 bb       	out	0x14, r24	; 20
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1118:	81 b3       	in	r24, 0x11	; 17
    111a:	80 6f       	ori	r24, 0xF0	; 240
    111c:	81 bb       	out	0x11, r24	; 17
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	0e 94 3a 08 	call	0x1074	; 0x1074 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1124:	88 e2       	ldi	r24, 0x28	; 40
    1126:	0e 94 3a 08 	call	0x1074	; 0x1074 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    112a:	8c e0       	ldi	r24, 0x0C	; 12
    112c:	0e 94 3a 08 	call	0x1074	; 0x1074 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 3a 08 	call	0x1074	; 0x1074 <LCD_sendCommand>
    1136:	08 95       	ret

00001138 <LCD_displayCharacter>:
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}

void LCD_displayCharacter(uint8_t data)
{
    1138:	cf 93       	push	r28
    113a:	c8 2f       	mov	r28, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    113c:	85 b3       	in	r24, 0x15	; 21
    113e:	80 62       	ori	r24, 0x20	; 32
    1140:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1142:	85 b3       	in	r24, 0x15	; 21
    1144:	8f 7b       	andi	r24, 0xBF	; 191
    1146:	85 bb       	out	0x15, r24	; 21
	//_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1148:	85 b3       	in	r24, 0x15	; 21
    114a:	80 68       	ori	r24, 0x80	; 128
    114c:	85 bb       	out	0x15, r24	; 21
	//_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    114e:	82 b3       	in	r24, 0x12	; 18
    1150:	8f 70       	andi	r24, 0x0F	; 15
    1152:	9c 2f       	mov	r25, r28
    1154:	90 7f       	andi	r25, 0xF0	; 240
    1156:	89 2b       	or	r24, r25
    1158:	82 bb       	out	0x12, r24	; 18
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1166:	85 b3       	in	r24, 0x15	; 21
    1168:	8f 77       	andi	r24, 0x7F	; 127
    116a:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Th = 13ns */
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1178:	85 b3       	in	r24, 0x15	; 21
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    118a:	22 b3       	in	r18, 0x12	; 18
    118c:	30 e1       	ldi	r19, 0x10	; 16
    118e:	c3 9f       	mul	r28, r19
    1190:	c0 01       	movw	r24, r0
    1192:	11 24       	eor	r1, r1
    1194:	92 2f       	mov	r25, r18
    1196:	9f 70       	andi	r25, 0x0F	; 15
    1198:	89 2b       	or	r24, r25
    119a:	82 bb       	out	0x12, r24	; 18
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
    119c:	61 e0       	ldi	r22, 0x01	; 1
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    11a8:	85 b3       	in	r24, 0x15	; 21
    11aa:	8f 77       	andi	r24, 0x7F	; 127
    11ac:	85 bb       	out	0x15, r24	; 21
	_delay_ms(1); /* delay for processing Th = 13ns */
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	8c 01       	movw	r16, r24
	uint8_t i = 0;
    11c6:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
    11ca:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_displayCharacter>
		i++;
    11ce:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    11d0:	f8 01       	movw	r30, r16
    11d2:	ec 0f       	add	r30, r28
    11d4:	f1 1d       	adc	r31, r1
    11d6:	80 81       	ld	r24, Z
    11d8:	81 11       	cpse	r24, r1
    11da:	f7 cf       	rjmp	.-18     	; 0x11ca <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	08 95       	ret

000011e4 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
	uint8_t Address;
	
	/* first of all calculate the required address */
	switch(row)
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <LCD_goToRowColumn+0x10>
    11e8:	70 f0       	brcs	.+28     	; 0x1206 <LCD_goToRowColumn+0x22>
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	31 f0       	breq	.+12     	; 0x11fa <LCD_goToRowColumn+0x16>
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	39 f0       	breq	.+14     	; 0x1200 <LCD_goToRowColumn+0x1c>
    11f2:	0a c0       	rjmp	.+20     	; 0x1208 <LCD_goToRowColumn+0x24>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
    11f4:	90 e4       	ldi	r25, 0x40	; 64
    11f6:	96 0f       	add	r25, r22
				break;
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <LCD_goToRowColumn+0x24>
		case 2:
				Address=col+0x10;
    11fa:	90 e1       	ldi	r25, 0x10	; 16
    11fc:	96 0f       	add	r25, r22
				break;
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <LCD_goToRowColumn+0x24>
		case 3:
				Address=col+0x50;
    1200:	90 e5       	ldi	r25, 0x50	; 80
    1202:	96 0f       	add	r25, r22
				break;
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <LCD_goToRowColumn+0x24>
	
	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
    1206:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1208:	89 2f       	mov	r24, r25
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	0e 94 3a 08 	call	0x1074	; 0x1074 <LCD_sendCommand>
    1210:	08 95       	ret

00001212 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1218:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    121c:	ce 01       	movw	r24, r28
    121e:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_displayString>
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <LCD_voidWriteNumber>:
   //LCD_displayString(buff);
//}
/********************************/

void LCD_voidWriteNumber(uint32_t num)
{
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	64 97       	sbiw	r28, 0x14	; 20
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
	uint8_t reminder,str[20]={0},arr_index=0;
    123e:	fe 01       	movw	r30, r28
    1240:	31 96       	adiw	r30, 0x01	; 1
    1242:	24 e1       	ldi	r18, 0x14	; 20
    1244:	df 01       	movw	r26, r30
    1246:	1d 92       	st	X+, r1
    1248:	2a 95       	dec	r18
    124a:	e9 f7       	brne	.-6      	; 0x1246 <LCD_voidWriteNumber+0x1e>
	if(num==0)
    124c:	61 15       	cp	r22, r1
    124e:	71 05       	cpc	r23, r1
    1250:	81 05       	cpc	r24, r1
    1252:	91 05       	cpc	r25, r1
    1254:	21 f4       	brne	.+8      	; 0x125e <LCD_voidWriteNumber+0x36>
	{
		str[arr_index]='0';
    1256:	20 e3       	ldi	r18, 0x30	; 48
    1258:	29 83       	std	Y+1, r18	; 0x01
		arr_index++;
    125a:	11 e0       	ldi	r17, 0x01	; 1
    125c:	15 c0       	rjmp	.+42     	; 0x1288 <LCD_voidWriteNumber+0x60>
//}
/********************************/

void LCD_voidWriteNumber(uint32_t num)
{
	uint8_t reminder,str[20]={0},arr_index=0;
    125e:	10 e0       	ldi	r17, 0x00	; 0
    1260:	13 c0       	rjmp	.+38     	; 0x1288 <LCD_voidWriteNumber+0x60>
		str[arr_index]='0';
		arr_index++;
	}
	while (num!=0)
	{
		reminder=num%10;
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
		/*to convert it to ASCII i.e. put it around '' */
		str[arr_index]=reminder+'0';
    126e:	e1 e0       	ldi	r30, 0x01	; 1
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	ec 0f       	add	r30, r28
    1274:	fd 1f       	adc	r31, r29
    1276:	e1 0f       	add	r30, r17
    1278:	f1 1d       	adc	r31, r1
    127a:	60 5d       	subi	r22, 0xD0	; 208
    127c:	60 83       	st	Z, r22
		arr_index++;
    127e:	1f 5f       	subi	r17, 0xFF	; 255
		num=num/10;
    1280:	62 2f       	mov	r22, r18
    1282:	73 2f       	mov	r23, r19
    1284:	84 2f       	mov	r24, r20
    1286:	95 2f       	mov	r25, r21
	if(num==0)
	{
		str[arr_index]='0';
		arr_index++;
	}
	while (num!=0)
    1288:	61 15       	cp	r22, r1
    128a:	71 05       	cpc	r23, r1
    128c:	81 05       	cpc	r24, r1
    128e:	91 05       	cpc	r25, r1
    1290:	41 f7       	brne	.-48     	; 0x1262 <LCD_voidWriteNumber+0x3a>
		/*to convert it to ASCII i.e. put it around '' */
		str[arr_index]=reminder+'0';
		arr_index++;
		num=num/10;
	}
	for(sint8_t i=arr_index-1;i>=0;i--)
    1292:	11 50       	subi	r17, 0x01	; 1
    1294:	0c c0       	rjmp	.+24     	; 0x12ae <LCD_voidWriteNumber+0x86>
	{
		LCD_displayCharacter(str[i]);
    1296:	e1 e0       	ldi	r30, 0x01	; 1
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	ec 0f       	add	r30, r28
    129c:	fd 1f       	adc	r31, r29
    129e:	e1 0f       	add	r30, r17
    12a0:	f1 1d       	adc	r31, r1
    12a2:	17 fd       	sbrc	r17, 7
    12a4:	fa 95       	dec	r31
    12a6:	80 81       	ld	r24, Z
    12a8:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_displayCharacter>
		/*to convert it to ASCII i.e. put it around '' */
		str[arr_index]=reminder+'0';
		arr_index++;
		num=num/10;
	}
	for(sint8_t i=arr_index-1;i>=0;i--)
    12ac:	11 50       	subi	r17, 0x01	; 1
    12ae:	11 23       	and	r17, r17
    12b0:	94 f7       	brge	.-28     	; 0x1296 <LCD_voidWriteNumber+0x6e>
	{
		LCD_displayCharacter(str[i]);
		//_delay_ms(1000);
	}
	_delay_ms(10);
    12b2:	6a e0       	ldi	r22, 0x0A	; 10
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_delay_ms>

	//LCD_sendCommand(0b00000001);
}
    12be:	64 96       	adiw	r28, 0x14	; 20
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	08 95       	ret

000012d2 <LCD_clearScreen>:

/***********************************/
void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 3a 08 	call	0x1074	; 0x1074 <LCD_sendCommand>
    12d8:	08 95       	ret

000012da <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    12da:	17 b8       	out	0x07, r1	; 7
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    12dc:	83 e8       	ldi	r24, 0x83	; 131
    12de:	86 b9       	out	0x06, r24	; 6
    12e0:	08 95       	ret

000012e2 <ADC_readChannel>:
}

uint16_t ADC_readChannel(uint8_t channel_num)
{
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    12e2:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    12e4:	97 b1       	in	r25, 0x07	; 7
    12e6:	90 7e       	andi	r25, 0xE0	; 224
    12e8:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    12ea:	97 b1       	in	r25, 0x07	; 7
    12ec:	89 2b       	or	r24, r25
    12ee:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    12f0:	86 b1       	in	r24, 0x06	; 6
    12f2:	80 64       	ori	r24, 0x40	; 64
    12f4:	86 b9       	out	0x06, r24	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    12f6:	34 9b       	sbis	0x06, 4	; 6
    12f8:	fe cf       	rjmp	.-4      	; 0x12f6 <ADC_readChannel+0x14>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    12fa:	86 b1       	in	r24, 0x06	; 6
    12fc:	80 61       	ori	r24, 0x10	; 16
    12fe:	86 b9       	out	0x06, r24	; 6
	return ADC; /* return the data register */
    1300:	84 b1       	in	r24, 0x04	; 4
    1302:	95 b1       	in	r25, 0x05	; 5
}
    1304:	08 95       	ret

00001306 <DIO_setPinDirection>:
			*value=PIND;
			break;
		}
	}
	return u8_State;
}
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	08 f0       	brcs	.+2      	; 0x130c <DIO_setPinDirection+0x6>
    130a:	78 c0       	rjmp	.+240    	; 0x13fc <DIO_setPinDirection+0xf6>
    130c:	68 30       	cpi	r22, 0x08	; 8
    130e:	08 f0       	brcs	.+2      	; 0x1312 <DIO_setPinDirection+0xc>
    1310:	77 c0       	rjmp	.+238    	; 0x1400 <DIO_setPinDirection+0xfa>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	11 f1       	breq	.+68     	; 0x135a <DIO_setPinDirection+0x54>
    1316:	30 f0       	brcs	.+12     	; 0x1324 <DIO_setPinDirection+0x1e>
    1318:	82 30       	cpi	r24, 0x02	; 2
    131a:	d1 f1       	breq	.+116    	; 0x1390 <DIO_setPinDirection+0x8a>
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	09 f4       	brne	.+2      	; 0x1322 <DIO_setPinDirection+0x1c>
    1320:	52 c0       	rjmp	.+164    	; 0x13c6 <DIO_setPinDirection+0xc0>
    1322:	70 c0       	rjmp	.+224    	; 0x1404 <DIO_setPinDirection+0xfe>
    1324:	41 11       	cpse	r20, r1
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <DIO_setPinDirection+0x3c>
    1328:	2a b3       	in	r18, 0x1a	; 26
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_setPinDirection+0x2e>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	6a 95       	dec	r22
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_setPinDirection+0x2a>
    1338:	80 95       	com	r24
    133a:	82 23       	and	r24, r18
    133c:	8a bb       	out	0x1a, r24	; 26
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	08 95       	ret
    1342:	2a b3       	in	r18, 0x1a	; 26
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_setPinDirection+0x48>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	6a 95       	dec	r22
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_setPinDirection+0x44>
    1352:	82 2b       	or	r24, r18
    1354:	8a bb       	out	0x1a, r24	; 26
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	08 95       	ret
    135a:	41 11       	cpse	r20, r1
    135c:	0d c0       	rjmp	.+26     	; 0x1378 <DIO_setPinDirection+0x72>
    135e:	27 b3       	in	r18, 0x17	; 23
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_setPinDirection+0x64>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	6a 95       	dec	r22
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_setPinDirection+0x60>
    136e:	80 95       	com	r24
    1370:	82 23       	and	r24, r18
    1372:	87 bb       	out	0x17, r24	; 23
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	08 95       	ret
    1378:	27 b3       	in	r18, 0x17	; 23
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_setPinDirection+0x7e>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	6a 95       	dec	r22
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_setPinDirection+0x7a>
    1388:	82 2b       	or	r24, r18
    138a:	87 bb       	out	0x17, r24	; 23
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	08 95       	ret
    1390:	41 11       	cpse	r20, r1
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <DIO_setPinDirection+0xa8>
    1394:	24 b3       	in	r18, 0x14	; 20
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_setPinDirection+0x9a>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	6a 95       	dec	r22
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_setPinDirection+0x96>
    13a4:	80 95       	com	r24
    13a6:	82 23       	and	r24, r18
    13a8:	84 bb       	out	0x14, r24	; 20
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	08 95       	ret
    13ae:	24 b3       	in	r18, 0x14	; 20
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_setPinDirection+0xb4>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	6a 95       	dec	r22
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_setPinDirection+0xb0>
    13be:	82 2b       	or	r24, r18
    13c0:	84 bb       	out	0x14, r24	; 20
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	08 95       	ret
    13c6:	41 11       	cpse	r20, r1
    13c8:	0d c0       	rjmp	.+26     	; 0x13e4 <DIO_setPinDirection+0xde>
    13ca:	21 b3       	in	r18, 0x11	; 17
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_setPinDirection+0xd0>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	6a 95       	dec	r22
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_setPinDirection+0xcc>
    13da:	80 95       	com	r24
    13dc:	82 23       	and	r24, r18
    13de:	81 bb       	out	0x11, r24	; 17
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	08 95       	ret
    13e4:	21 b3       	in	r18, 0x11	; 17
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_setPinDirection+0xea>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	6a 95       	dec	r22
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_setPinDirection+0xe6>
    13f4:	82 2b       	or	r24, r18
    13f6:	81 bb       	out	0x11, r24	; 17
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	08 95       	ret
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	08 95       	ret
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	08 95       	ret
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	08 95       	ret

00001408 <DIO_writePin>:


E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
    1408:	84 30       	cpi	r24, 0x04	; 4
    140a:	08 f0       	brcs	.+2      	; 0x140e <DIO_writePin+0x6>
    140c:	78 c0       	rjmp	.+240    	; 0x14fe <DIO_writePin+0xf6>
    140e:	68 30       	cpi	r22, 0x08	; 8
    1410:	08 f0       	brcs	.+2      	; 0x1414 <DIO_writePin+0xc>
    1412:	77 c0       	rjmp	.+238    	; 0x1502 <DIO_writePin+0xfa>
		u8_State=Success;
		switch(port)
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	11 f1       	breq	.+68     	; 0x145c <DIO_writePin+0x54>
    1418:	30 f0       	brcs	.+12     	; 0x1426 <DIO_writePin+0x1e>
    141a:	82 30       	cpi	r24, 0x02	; 2
    141c:	d1 f1       	breq	.+116    	; 0x1492 <DIO_writePin+0x8a>
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	09 f4       	brne	.+2      	; 0x1424 <DIO_writePin+0x1c>
    1422:	52 c0       	rjmp	.+164    	; 0x14c8 <DIO_writePin+0xc0>
    1424:	70 c0       	rjmp	.+224    	; 0x1506 <DIO_writePin+0xfe>
		{
		case PortA:
		{
			if(data==HIGH)
    1426:	41 30       	cpi	r20, 0x01	; 1
    1428:	61 f4       	brne	.+24     	; 0x1442 <DIO_writePin+0x3a>
				SET_BIT(PORTA,pin);
    142a:	2b b3       	in	r18, 0x1b	; 27
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_writePin+0x2e>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	6a 95       	dec	r22
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_writePin+0x2a>
    143a:	82 2b       	or	r24, r18
    143c:	8b bb       	out	0x1b, r24	; 27

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 95       	ret
		case PortA:
		{
			if(data==HIGH)
				SET_BIT(PORTA,pin);
			else
				CLEAR_BIT(PORTA,pin);
    1442:	2b b3       	in	r18, 0x1b	; 27
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_writePin+0x46>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	6a 95       	dec	r22
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_writePin+0x42>
    1452:	80 95       	com	r24
    1454:	82 23       	and	r24, r18
    1456:	8b bb       	out	0x1b, r24	; 27

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	08 95       	ret
				CLEAR_BIT(PORTA,pin);
		}
		break;
		case PortB:
		{
			if(data==HIGH)
    145c:	41 30       	cpi	r20, 0x01	; 1
    145e:	61 f4       	brne	.+24     	; 0x1478 <DIO_writePin+0x70>
				SET_BIT(PORTB,pin);
    1460:	28 b3       	in	r18, 0x18	; 24
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_writePin+0x64>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	6a 95       	dec	r22
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_writePin+0x60>
    1470:	82 2b       	or	r24, r18
    1472:	88 bb       	out	0x18, r24	; 24

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	08 95       	ret
		case PortB:
		{
			if(data==HIGH)
				SET_BIT(PORTB,pin);
			else
				CLEAR_BIT(PORTB,pin);
    1478:	28 b3       	in	r18, 0x18	; 24
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_writePin+0x7c>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	6a 95       	dec	r22
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_writePin+0x78>
    1488:	80 95       	com	r24
    148a:	82 23       	and	r24, r18
    148c:	88 bb       	out	0x18, r24	; 24

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	08 95       	ret
				CLEAR_BIT(PORTB,pin);
		}
		break;
		case PortC:
		{
			if(data==HIGH)
    1492:	41 30       	cpi	r20, 0x01	; 1
    1494:	61 f4       	brne	.+24     	; 0x14ae <DIO_writePin+0xa6>
				SET_BIT(PORTC,pin);
    1496:	25 b3       	in	r18, 0x15	; 21
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_writePin+0x9a>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	6a 95       	dec	r22
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_writePin+0x96>
    14a6:	82 2b       	or	r24, r18
    14a8:	85 bb       	out	0x15, r24	; 21

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	08 95       	ret
		case PortC:
		{
			if(data==HIGH)
				SET_BIT(PORTC,pin);
			else
				CLEAR_BIT(PORTC,pin);
    14ae:	25 b3       	in	r18, 0x15	; 21
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_writePin+0xb2>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	6a 95       	dec	r22
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DIO_writePin+0xae>
    14be:	80 95       	com	r24
    14c0:	82 23       	and	r24, r18
    14c2:	85 bb       	out	0x15, r24	; 21

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	08 95       	ret
				CLEAR_BIT(PORTC,pin);
		}
		break;
		case PortD:
		{
			if(data==HIGH)
    14c8:	41 30       	cpi	r20, 0x01	; 1
    14ca:	61 f4       	brne	.+24     	; 0x14e4 <DIO_writePin+0xdc>
				SET_BIT(PORTD,pin);
    14cc:	22 b3       	in	r18, 0x12	; 18
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_writePin+0xd0>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	6a 95       	dec	r22
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_writePin+0xcc>
    14dc:	82 2b       	or	r24, r18
    14de:	82 bb       	out	0x12, r24	; 18

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	08 95       	ret
		case PortD:
		{
			if(data==HIGH)
				SET_BIT(PORTD,pin);
			else
				CLEAR_BIT(PORTD,pin);
    14e4:	22 b3       	in	r18, 0x12	; 18
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_writePin+0xe8>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	6a 95       	dec	r22
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_writePin+0xe4>
    14f4:	80 95       	com	r24
    14f6:	82 23       	and	r24, r18
    14f8:	82 bb       	out	0x12, r24	; 18

E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	08 95       	ret
}


E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
	E_STATUS u8_State=ERROR;
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	08 95       	ret
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	08 95       	ret
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
		u8_State=Success;
    1506:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		}
	}
	return u8_State;
}
    1508:	08 95       	ret

0000150a <I2C_Init>:
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
    150a:	81 11       	cpse	r24, r1
    150c:	08 c0       	rjmp	.+16     	; 0x151e <I2C_Init+0x14>
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	81 b9       	out	0x01, r24	; 1
    1512:	87 e0       	ldi	r24, 0x07	; 7
    1514:	80 b9       	out	0x00, r24	; 0
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	86 bf       	out	0x36, r24	; 54
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	08 95       	ret
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	08 95       	ret

00001522 <I2C_Start>:
    1522:	81 11       	cpse	r24, r1
    1524:	07 c0       	rjmp	.+14     	; 0x1534 <I2C_Start+0x12>
    1526:	84 ea       	ldi	r24, 0xA4	; 164
    1528:	86 bf       	out	0x36, r24	; 54
    152a:	06 b6       	in	r0, 0x36	; 54
    152c:	07 fe       	sbrs	r0, 7
    152e:	fd cf       	rjmp	.-6      	; 0x152a <I2C_Start+0x8>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	08 95       	ret
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	08 95       	ret

00001538 <I2C_RepeatedStart>:
    1538:	81 11       	cpse	r24, r1
    153a:	08 c0       	rjmp	.+16     	; 0x154c <I2C_RepeatedStart+0x14>
    153c:	86 b7       	in	r24, 0x36	; 54
    153e:	80 6a       	ori	r24, 0xA0	; 160
    1540:	86 bf       	out	0x36, r24	; 54
    1542:	06 b6       	in	r0, 0x36	; 54
    1544:	07 fe       	sbrs	r0, 7
    1546:	fd cf       	rjmp	.-6      	; 0x1542 <I2C_RepeatedStart+0xa>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	08 95       	ret
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	08 95       	ret

00001550 <I2C_Write>:
    1550:	81 11       	cpse	r24, r1
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <I2C_Write+0x14>
    1554:	63 b9       	out	0x03, r22	; 3
    1556:	84 e8       	ldi	r24, 0x84	; 132
    1558:	86 bf       	out	0x36, r24	; 54
    155a:	06 b6       	in	r0, 0x36	; 54
    155c:	07 fe       	sbrs	r0, 7
    155e:	fd cf       	rjmp	.-6      	; 0x155a <I2C_Write+0xa>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	08 95       	ret
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	08 95       	ret

00001568 <I2C_ReadNoAck>:
* @return function error state.
*/
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
    1568:	61 15       	cp	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	69 f0       	breq	.+26     	; 0x1588 <I2C_ReadNoAck+0x20>
   
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CDataR;
   
   switch(I2C_CH)
    156e:	81 11       	cpse	r24, r1
    1570:	0d c0       	rjmp	.+26     	; 0x158c <I2C_ReadNoAck+0x24>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* start receiving and don't send ack at end. */
   *ptr_I2CControlR |= (I2C_INTERRUPT_FLAG);
    1572:	86 b7       	in	r24, 0x36	; 54
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	86 bf       	out	0x36, r24	; 54
   /* loop until interrupt flag is raised */
   while (!(*ptr_I2CControlR & I2C_INTERRUPT_FLAG));
    1578:	06 b6       	in	r0, 0x36	; 54
    157a:	07 fe       	sbrs	r0, 7
    157c:	fd cf       	rjmp	.-6      	; 0x1578 <I2C_ReadNoAck+0x10>
   /* return data received */
   *Data = *ptr_I2CDataR;
    157e:	83 b1       	in	r24, 0x03	; 3
    1580:	fb 01       	movw	r30, r22
    1582:	80 83       	st	Z, r24
   
   /* return success message */
   return E_I2C_SUCCESS;
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	08 95       	ret
I2C_ERROR_state_t I2C_ReadNoAck(uint8_t I2C_CH, uint8_t * Data)
{
   /* making sure an initialized pointer is sent to the function */
   if(NULL_PTR == Data)
   {
      return E_I2C_NULL_PTR;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	08 95       	ret
         ptr_I2CDataR = &I2C_DATA_R;
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
    158c:	82 e0       	ldi	r24, 0x02	; 2
   /* return data received */
   *Data = *ptr_I2CDataR;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
    158e:	08 95       	ret

00001590 <I2C_Stop>:
I2C_ERROR_state_t I2C_Stop(uint8_t I2C_CH)
{
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   
   switch(I2C_CH)
    1590:	81 11       	cpse	r24, r1
    1592:	08 c0       	rjmp	.+16     	; 0x15a4 <I2C_Stop+0x14>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set stop condition */
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
    1594:	84 e9       	ldi	r24, 0x94	; 148
    1596:	86 bf       	out	0x36, r24	; 54
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
    1598:	96 b7       	in	r25, 0x36	; 54
    159a:	89 2f       	mov	r24, r25
    159c:	80 71       	andi	r24, 0x10	; 16
    159e:	94 fd       	sbrc	r25, 4
    15a0:	fb cf       	rjmp	.-10     	; 0x1598 <I2C_Stop+0x8>
    15a2:	08 95       	ret
      case I2C_CH_0:
         ptr_I2CControlR = &I2C_CONTROL_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
   *ptr_I2CControlR = (I2C_INTERRUPT_FLAG | I2C_EN | I2C_STOP_BIT);
   
   while (*ptr_I2CControlR & I2C_STOP_BIT);
   /* return success message */
   return E_I2C_SUCCESS;
}
    15a6:	08 95       	ret

000015a8 <SPI_vdInit>:

void SPI_vdInit(void)
{
	#if (SPI_Mode==Master)
	
	DDRB=((1<<5)|(1<<7));    // * Set MOSI and SCK output
    15a8:	80 ea       	ldi	r24, 0xA0	; 160
    15aa:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<6)|(1<<4)|(1<<0)|(1<<2);
    15ac:	85 e5       	ldi	r24, 0x55	; 85
    15ae:	8d b9       	out	0x0d, r24	; 13
    15b0:	08 95       	ret

000015b2 <SPI_MasterTransmit>:

}
uint8_t SPI_MasterTransmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
    15b2:	8f b9       	out	0x0f, r24	; 15

	/* Wait for transmission complete */
	while((BIT_READ(SPSR,Pin6)) ==1);
    15b4:	76 99       	sbic	0x0e, 6	; 14
    15b6:	fe cf       	rjmp	.-4      	; 0x15b4 <SPI_MasterTransmit+0x2>
	while((BIT_READ(SPSR,Pin7))!=1);
    15b8:	77 9b       	sbis	0x0e, 7	; 14
    15ba:	fe cf       	rjmp	.-4      	; 0x15b8 <SPI_MasterTransmit+0x6>
	SET_BIT(SPSR,Pin7);
    15bc:	8e b1       	in	r24, 0x0e	; 14
    15be:	80 68       	ori	r24, 0x80	; 128
    15c0:	8e b9       	out	0x0e, r24	; 14
	}
	else if((BIT_READ(SPSR,Pin6))==0)
	{
		UART_vdSendByte(10);
	}*/
	return (SPDR);
    15c2:	8f b1       	in	r24, 0x0f	; 15
		
}
    15c4:	08 95       	ret

000015c6 <UART_vdInit>:
#include "UART.h"
#include "UART_Registers.h"
void UART_vdInit(void)
{
	// Set BaudRate  9600/8MhZ
	UBRRL_REGISTER=51;
    15c6:	83 e3       	ldi	r24, 0x33	; 51
    15c8:	89 b9       	out	0x09, r24	; 9
	UBRRH_REGISTER=0;
    15ca:	10 bc       	out	0x20, r1	; 32
	// Enable RX and TX
	UCSRB_REGISTER=0x18;
    15cc:	88 e1       	ldi	r24, 0x18	; 24
    15ce:	8a b9       	out	0x0a, r24	; 10
	// Set Frame Format -> 8 data, 1 stop, No Parity
	UCSRC_REGISTER=0x86;
    15d0:	86 e8       	ldi	r24, 0x86	; 134
    15d2:	80 bd       	out	0x20, r24	; 32
    15d4:	08 95       	ret

000015d6 <UART_vdSendByte>:
}

void UART_vdSendByte(uint8_t data)
{
  // Wait until transmission Register Empty
  while(!(UCSRA_REGISTER&0x20));
    15d6:	5d 9b       	sbis	0x0b, 5	; 11
    15d8:	fe cf       	rjmp	.-4      	; 0x15d6 <UART_vdSendByte>
  UDR_REGISTER = data;
    15da:	8c b9       	out	0x0c, r24	; 12
    15dc:	08 95       	ret

000015de <UART_uint8_tGetByte>:

uint8_t UART_uint8_tGetByte(void)
{
  uint8_t Result;
  // Wait for data to be received 
  while(!(UCSRA_REGISTER&0x80));
    15de:	5f 9b       	sbis	0x0b, 7	; 11
    15e0:	fe cf       	rjmp	.-4      	; 0x15de <UART_uint8_tGetByte>
  Result = UDR_REGISTER;
    15e2:	8c b1       	in	r24, 0x0c	; 12
  
  // Clear Flag 
  SET_BIT(UCSRA_REGISTER,7);
    15e4:	9b b1       	in	r25, 0x0b	; 11
    15e6:	90 68       	ori	r25, 0x80	; 128
    15e8:	9b b9       	out	0x0b, r25	; 11
  return Result;
}
    15ea:	08 95       	ret

000015ec <UART_uint8_tSendString>:
uint8_t UART_uint8_tSendString(unsigned char*data)
{
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	8c 01       	movw	r16, r24
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
    15f4:	c0 e0       	ldi	r28, 0x00	; 0
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <UART_uint8_tSendString+0x12>
	{
		UART_vdSendByte(data[i]);
    15f8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
  SET_BIT(UCSRA_REGISTER,7);
  return Result;
}
uint8_t UART_uint8_tSendString(unsigned char*data)
{
	for(uint8_t i=0;(data[i]!=13)&&(data[i]!='\0');i++)
    15fc:	cf 5f       	subi	r28, 0xFF	; 255
    15fe:	f8 01       	movw	r30, r16
    1600:	ec 0f       	add	r30, r28
    1602:	f1 1d       	adc	r31, r1
    1604:	80 81       	ld	r24, Z
    1606:	8d 30       	cpi	r24, 0x0D	; 13
    1608:	11 f0       	breq	.+4      	; 0x160e <UART_uint8_tSendString+0x22>
    160a:	81 11       	cpse	r24, r1
    160c:	f5 cf       	rjmp	.-22     	; 0x15f8 <UART_uint8_tSendString+0xc>
	{
		UART_vdSendByte(data[i]);
	}
	UART_vdSendByte('\r');
    160e:	8d e0       	ldi	r24, 0x0D	; 13
    1610:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <UART_vdSendByte>
	return 0;
}
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <UART_uint8_tGetString>:
void UART_uint8_tGetString(uint8_t*data)
{
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	7c 01       	movw	r14, r24
	uint8_t i=0;
    162a:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		
		data[i]=UART_uint8_tGetByte();
    162c:	87 01       	movw	r16, r14
    162e:	0c 0f       	add	r16, r28
    1630:	11 1d       	adc	r17, r1
    1632:	0e 94 ef 0a 	call	0x15de	; 0x15de <UART_uint8_tGetByte>
    1636:	f8 01       	movw	r30, r16
    1638:	80 83       	st	Z, r24
		if(data[i]==13)
    163a:	8d 30       	cpi	r24, 0x0D	; 13
    163c:	09 f4       	brne	.+2      	; 0x1640 <UART_uint8_tGetString+0x22>
		{
			data[i]='\0';
    163e:	10 82       	st	Z, r1
		}
		i++;
    1640:	cf 5f       	subi	r28, 0xFF	; 255
	
	}while(data[(i-1)]!='\0');
    1642:	f7 01       	movw	r30, r14
    1644:	ec 0f       	add	r30, r28
    1646:	f1 1d       	adc	r31, r1
    1648:	31 97       	sbiw	r30, 0x01	; 1
    164a:	80 81       	ld	r24, Z
    164c:	81 11       	cpse	r24, r1
    164e:	ee cf       	rjmp	.-36     	; 0x162c <UART_uint8_tGetString+0xe>

	
}
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <UART_IsDataReady>:
uint8_t UART_IsDataReady(void)
{
	if(!(UCSRA_REGISTER&0x80))
    165c:	5f 99       	sbic	0x0b, 7	; 11
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <UART_IsDataReady+0x8>
	return 0;
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	08 95       	ret
	return 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	08 95       	ret

00001668 <dummy_delay>:
-----------------------------------*/
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	00 d0       	rcall	.+0      	; 0x166e <dummy_delay+0x6>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <dummy_delay+0x8>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
   for(volatile uint16_t i=0; i<100; i++)
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	19 82       	std	Y+1, r1	; 0x01
    1678:	15 c0       	rjmp	.+42     	; 0x16a4 <dummy_delay+0x3c>
   {
      for(volatile uint8_t j=0; j<32; j++)
    167a:	1c 82       	std	Y+4, r1	; 0x04
    167c:	0b c0       	rjmp	.+22     	; 0x1694 <dummy_delay+0x2c>
      {
         for(volatile uint8_t k=0; k<2; k++)
    167e:	1b 82       	std	Y+3, r1	; 0x03
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <dummy_delay+0x20>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	d0 f3       	brcs	.-12     	; 0x1682 <dummy_delay+0x1a>
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
   {
      for(volatile uint8_t j=0; j<32; j++)
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	8c 83       	std	Y+4, r24	; 0x04
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	80 32       	cpi	r24, 0x20	; 32
    1698:	90 f3       	brcs	.-28     	; 0x167e <dummy_delay+0x16>
/**
* @brief: This function is a dummy delay.
*/
void dummy_delay(void)
{
   for(volatile uint16_t i=0; i<100; i++)
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	9a 81       	ldd	r25, Y+2	; 0x02
    16a8:	84 36       	cpi	r24, 0x64	; 100
    16aa:	91 05       	cpc	r25, r1
    16ac:	30 f3       	brcs	.-52     	; 0x167a <dummy_delay+0x12>
         {
            
         }
      }
   }
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <StringCompare>:
* @param [in]  str2   -  pointer to the second string.
*
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
    16bc:	dc 01       	movw	r26, r24
   uint8_t u8_counter = 0;
    16be:	40 e0       	ldi	r20, 0x00	; 0
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    16c0:	0a c0       	rjmp	.+20     	; 0x16d6 <StringCompare+0x1a>
   {
      if(str1[u8_counter] != str2[u8_counter])
    16c2:	fb 01       	movw	r30, r22
    16c4:	e2 0f       	add	r30, r18
    16c6:	f3 1f       	adc	r31, r19
    16c8:	20 81       	ld	r18, Z
    16ca:	92 17       	cp	r25, r18
    16cc:	19 f0       	breq	.+6      	; 0x16d4 <StringCompare+0x18>
      {
         u8_isEqual = FALSE;
         u8_counter++;
    16ce:	4f 5f       	subi	r20, 0xFF	; 255
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
   {
      if(str1[u8_counter] != str2[u8_counter])
      {
         u8_isEqual = FALSE;
    16d0:	80 e0       	ldi	r24, 0x00	; 0
         u8_counter++;
         break;
    16d2:	0e c0       	rjmp	.+28     	; 0x16f0 <StringCompare+0x34>
      }
      u8_counter++;
    16d4:	4f 5f       	subi	r20, 0xFF	; 255
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
   
   while(str1[u8_counter] != END_OF_STRING && str1[u8_counter] != NEW_LINE)
    16d6:	24 2f       	mov	r18, r20
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	fd 01       	movw	r30, r26
    16dc:	e2 0f       	add	r30, r18
    16de:	f3 1f       	adc	r31, r19
    16e0:	90 81       	ld	r25, Z
    16e2:	99 23       	and	r25, r25
    16e4:	21 f0       	breq	.+8      	; 0x16ee <StringCompare+0x32>
    16e6:	9d 30       	cpi	r25, 0x0D	; 13
    16e8:	61 f7       	brne	.-40     	; 0x16c2 <StringCompare+0x6>
* @return function error state.
*/
uint8_t StringCompare(uint8_t * str1, uint8_t * str2)
{
   uint8_t u8_counter = 0;
   uint8_t u8_isEqual = TRUE;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <StringCompare+0x34>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
         u8_counter++;
         break;
      }
      u8_counter++;
   }
   if( str2[u8_counter] != END_OF_STRING )
    16f0:	fb 01       	movw	r30, r22
    16f2:	e4 0f       	add	r30, r20
    16f4:	f1 1d       	adc	r31, r1
    16f6:	90 81       	ld	r25, Z
    16f8:	91 11       	cpse	r25, r1
   {
      u8_isEqual = FALSE;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
   }
   return u8_isEqual;
}
    16fc:	08 95       	ret

000016fe <__subsf3>:
    16fe:	50 58       	subi	r21, 0x80	; 128

00001700 <__addsf3>:
    1700:	bb 27       	eor	r27, r27
    1702:	aa 27       	eor	r26, r26
    1704:	0e 94 97 0b 	call	0x172e	; 0x172e <__addsf3x>
    1708:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_round>
    170c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fp_pscA>
    1710:	38 f0       	brcs	.+14     	; 0x1720 <__addsf3+0x20>
    1712:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_pscB>
    1716:	20 f0       	brcs	.+8      	; 0x1720 <__addsf3+0x20>
    1718:	39 f4       	brne	.+14     	; 0x1728 <__addsf3+0x28>
    171a:	9f 3f       	cpi	r25, 0xFF	; 255
    171c:	19 f4       	brne	.+6      	; 0x1724 <__addsf3+0x24>
    171e:	26 f4       	brtc	.+8      	; 0x1728 <__addsf3+0x28>
    1720:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_nan>
    1724:	0e f4       	brtc	.+2      	; 0x1728 <__addsf3+0x28>
    1726:	e0 95       	com	r30
    1728:	e7 fb       	bst	r30, 7
    172a:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>

0000172e <__addsf3x>:
    172e:	e9 2f       	mov	r30, r25
    1730:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_split3>
    1734:	58 f3       	brcs	.-42     	; 0x170c <__addsf3+0xc>
    1736:	ba 17       	cp	r27, r26
    1738:	62 07       	cpc	r22, r18
    173a:	73 07       	cpc	r23, r19
    173c:	84 07       	cpc	r24, r20
    173e:	95 07       	cpc	r25, r21
    1740:	20 f0       	brcs	.+8      	; 0x174a <__addsf3x+0x1c>
    1742:	79 f4       	brne	.+30     	; 0x1762 <__addsf3x+0x34>
    1744:	a6 f5       	brtc	.+104    	; 0x17ae <__addsf3x+0x80>
    1746:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__fp_zero>
    174a:	0e f4       	brtc	.+2      	; 0x174e <__addsf3x+0x20>
    174c:	e0 95       	com	r30
    174e:	0b 2e       	mov	r0, r27
    1750:	ba 2f       	mov	r27, r26
    1752:	a0 2d       	mov	r26, r0
    1754:	0b 01       	movw	r0, r22
    1756:	b9 01       	movw	r22, r18
    1758:	90 01       	movw	r18, r0
    175a:	0c 01       	movw	r0, r24
    175c:	ca 01       	movw	r24, r20
    175e:	a0 01       	movw	r20, r0
    1760:	11 24       	eor	r1, r1
    1762:	ff 27       	eor	r31, r31
    1764:	59 1b       	sub	r21, r25
    1766:	99 f0       	breq	.+38     	; 0x178e <__addsf3x+0x60>
    1768:	59 3f       	cpi	r21, 0xF9	; 249
    176a:	50 f4       	brcc	.+20     	; 0x1780 <__addsf3x+0x52>
    176c:	50 3e       	cpi	r21, 0xE0	; 224
    176e:	68 f1       	brcs	.+90     	; 0x17ca <__addsf3x+0x9c>
    1770:	1a 16       	cp	r1, r26
    1772:	f0 40       	sbci	r31, 0x00	; 0
    1774:	a2 2f       	mov	r26, r18
    1776:	23 2f       	mov	r18, r19
    1778:	34 2f       	mov	r19, r20
    177a:	44 27       	eor	r20, r20
    177c:	58 5f       	subi	r21, 0xF8	; 248
    177e:	f3 cf       	rjmp	.-26     	; 0x1766 <__addsf3x+0x38>
    1780:	46 95       	lsr	r20
    1782:	37 95       	ror	r19
    1784:	27 95       	ror	r18
    1786:	a7 95       	ror	r26
    1788:	f0 40       	sbci	r31, 0x00	; 0
    178a:	53 95       	inc	r21
    178c:	c9 f7       	brne	.-14     	; 0x1780 <__addsf3x+0x52>
    178e:	7e f4       	brtc	.+30     	; 0x17ae <__addsf3x+0x80>
    1790:	1f 16       	cp	r1, r31
    1792:	ba 0b       	sbc	r27, r26
    1794:	62 0b       	sbc	r22, r18
    1796:	73 0b       	sbc	r23, r19
    1798:	84 0b       	sbc	r24, r20
    179a:	ba f0       	brmi	.+46     	; 0x17ca <__addsf3x+0x9c>
    179c:	91 50       	subi	r25, 0x01	; 1
    179e:	a1 f0       	breq	.+40     	; 0x17c8 <__addsf3x+0x9a>
    17a0:	ff 0f       	add	r31, r31
    17a2:	bb 1f       	adc	r27, r27
    17a4:	66 1f       	adc	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	c2 f7       	brpl	.-16     	; 0x179c <__addsf3x+0x6e>
    17ac:	0e c0       	rjmp	.+28     	; 0x17ca <__addsf3x+0x9c>
    17ae:	ba 0f       	add	r27, r26
    17b0:	62 1f       	adc	r22, r18
    17b2:	73 1f       	adc	r23, r19
    17b4:	84 1f       	adc	r24, r20
    17b6:	48 f4       	brcc	.+18     	; 0x17ca <__addsf3x+0x9c>
    17b8:	87 95       	ror	r24
    17ba:	77 95       	ror	r23
    17bc:	67 95       	ror	r22
    17be:	b7 95       	ror	r27
    17c0:	f7 95       	ror	r31
    17c2:	9e 3f       	cpi	r25, 0xFE	; 254
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <__addsf3x+0x9a>
    17c6:	b0 cf       	rjmp	.-160    	; 0x1728 <__addsf3+0x28>
    17c8:	93 95       	inc	r25
    17ca:	88 0f       	add	r24, r24
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <__addsf3x+0xa2>
    17ce:	99 27       	eor	r25, r25
    17d0:	ee 0f       	add	r30, r30
    17d2:	97 95       	ror	r25
    17d4:	87 95       	ror	r24
    17d6:	08 95       	ret

000017d8 <__cmpsf2>:
    17d8:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fp_cmp>
    17dc:	08 f4       	brcc	.+2      	; 0x17e0 <__cmpsf2+0x8>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	08 95       	ret

000017e2 <__divsf3>:
    17e2:	0e 94 05 0c 	call	0x180a	; 0x180a <__divsf3x>
    17e6:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_round>
    17ea:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_pscB>
    17ee:	58 f0       	brcs	.+22     	; 0x1806 <__divsf3+0x24>
    17f0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fp_pscA>
    17f4:	40 f0       	brcs	.+16     	; 0x1806 <__divsf3+0x24>
    17f6:	29 f4       	brne	.+10     	; 0x1802 <__divsf3+0x20>
    17f8:	5f 3f       	cpi	r21, 0xFF	; 255
    17fa:	29 f0       	breq	.+10     	; 0x1806 <__divsf3+0x24>
    17fc:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>
    1800:	51 11       	cpse	r21, r1
    1802:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_szero>
    1806:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_nan>

0000180a <__divsf3x>:
    180a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_split3>
    180e:	68 f3       	brcs	.-38     	; 0x17ea <__divsf3+0x8>

00001810 <__divsf3_pse>:
    1810:	99 23       	and	r25, r25
    1812:	b1 f3       	breq	.-20     	; 0x1800 <__divsf3+0x1e>
    1814:	55 23       	and	r21, r21
    1816:	91 f3       	breq	.-28     	; 0x17fc <__divsf3+0x1a>
    1818:	95 1b       	sub	r25, r21
    181a:	55 0b       	sbc	r21, r21
    181c:	bb 27       	eor	r27, r27
    181e:	aa 27       	eor	r26, r26
    1820:	62 17       	cp	r22, r18
    1822:	73 07       	cpc	r23, r19
    1824:	84 07       	cpc	r24, r20
    1826:	38 f0       	brcs	.+14     	; 0x1836 <__divsf3_pse+0x26>
    1828:	9f 5f       	subi	r25, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	aa 1f       	adc	r26, r26
    1834:	a9 f3       	breq	.-22     	; 0x1820 <__divsf3_pse+0x10>
    1836:	35 d0       	rcall	.+106    	; 0x18a2 <__divsf3_pse+0x92>
    1838:	0e 2e       	mov	r0, r30
    183a:	3a f0       	brmi	.+14     	; 0x184a <__divsf3_pse+0x3a>
    183c:	e0 e8       	ldi	r30, 0x80	; 128
    183e:	32 d0       	rcall	.+100    	; 0x18a4 <__divsf3_pse+0x94>
    1840:	91 50       	subi	r25, 0x01	; 1
    1842:	50 40       	sbci	r21, 0x00	; 0
    1844:	e6 95       	lsr	r30
    1846:	00 1c       	adc	r0, r0
    1848:	ca f7       	brpl	.-14     	; 0x183c <__divsf3_pse+0x2c>
    184a:	2b d0       	rcall	.+86     	; 0x18a2 <__divsf3_pse+0x92>
    184c:	fe 2f       	mov	r31, r30
    184e:	29 d0       	rcall	.+82     	; 0x18a2 <__divsf3_pse+0x92>
    1850:	66 0f       	add	r22, r22
    1852:	77 1f       	adc	r23, r23
    1854:	88 1f       	adc	r24, r24
    1856:	bb 1f       	adc	r27, r27
    1858:	26 17       	cp	r18, r22
    185a:	37 07       	cpc	r19, r23
    185c:	48 07       	cpc	r20, r24
    185e:	ab 07       	cpc	r26, r27
    1860:	b0 e8       	ldi	r27, 0x80	; 128
    1862:	09 f0       	breq	.+2      	; 0x1866 <__divsf3_pse+0x56>
    1864:	bb 0b       	sbc	r27, r27
    1866:	80 2d       	mov	r24, r0
    1868:	bf 01       	movw	r22, r30
    186a:	ff 27       	eor	r31, r31
    186c:	93 58       	subi	r25, 0x83	; 131
    186e:	5f 4f       	sbci	r21, 0xFF	; 255
    1870:	3a f0       	brmi	.+14     	; 0x1880 <__divsf3_pse+0x70>
    1872:	9e 3f       	cpi	r25, 0xFE	; 254
    1874:	51 05       	cpc	r21, r1
    1876:	78 f0       	brcs	.+30     	; 0x1896 <__divsf3_pse+0x86>
    1878:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>
    187c:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_szero>
    1880:	5f 3f       	cpi	r21, 0xFF	; 255
    1882:	e4 f3       	brlt	.-8      	; 0x187c <__divsf3_pse+0x6c>
    1884:	98 3e       	cpi	r25, 0xE8	; 232
    1886:	d4 f3       	brlt	.-12     	; 0x187c <__divsf3_pse+0x6c>
    1888:	86 95       	lsr	r24
    188a:	77 95       	ror	r23
    188c:	67 95       	ror	r22
    188e:	b7 95       	ror	r27
    1890:	f7 95       	ror	r31
    1892:	9f 5f       	subi	r25, 0xFF	; 255
    1894:	c9 f7       	brne	.-14     	; 0x1888 <__divsf3_pse+0x78>
    1896:	88 0f       	add	r24, r24
    1898:	91 1d       	adc	r25, r1
    189a:	96 95       	lsr	r25
    189c:	87 95       	ror	r24
    189e:	97 f9       	bld	r25, 7
    18a0:	08 95       	ret
    18a2:	e1 e0       	ldi	r30, 0x01	; 1
    18a4:	66 0f       	add	r22, r22
    18a6:	77 1f       	adc	r23, r23
    18a8:	88 1f       	adc	r24, r24
    18aa:	bb 1f       	adc	r27, r27
    18ac:	62 17       	cp	r22, r18
    18ae:	73 07       	cpc	r23, r19
    18b0:	84 07       	cpc	r24, r20
    18b2:	ba 07       	cpc	r27, r26
    18b4:	20 f0       	brcs	.+8      	; 0x18be <__divsf3_pse+0xae>
    18b6:	62 1b       	sub	r22, r18
    18b8:	73 0b       	sbc	r23, r19
    18ba:	84 0b       	sbc	r24, r20
    18bc:	ba 0b       	sbc	r27, r26
    18be:	ee 1f       	adc	r30, r30
    18c0:	88 f7       	brcc	.-30     	; 0x18a4 <__divsf3_pse+0x94>
    18c2:	e0 95       	com	r30
    18c4:	08 95       	ret

000018c6 <__fixunssfsi>:
    18c6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fp_splitA>
    18ca:	88 f0       	brcs	.+34     	; 0x18ee <__fixunssfsi+0x28>
    18cc:	9f 57       	subi	r25, 0x7F	; 127
    18ce:	98 f0       	brcs	.+38     	; 0x18f6 <__fixunssfsi+0x30>
    18d0:	b9 2f       	mov	r27, r25
    18d2:	99 27       	eor	r25, r25
    18d4:	b7 51       	subi	r27, 0x17	; 23
    18d6:	b0 f0       	brcs	.+44     	; 0x1904 <__fixunssfsi+0x3e>
    18d8:	e1 f0       	breq	.+56     	; 0x1912 <__fixunssfsi+0x4c>
    18da:	66 0f       	add	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	1a f0       	brmi	.+6      	; 0x18ea <__fixunssfsi+0x24>
    18e4:	ba 95       	dec	r27
    18e6:	c9 f7       	brne	.-14     	; 0x18da <__fixunssfsi+0x14>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <__fixunssfsi+0x4c>
    18ea:	b1 30       	cpi	r27, 0x01	; 1
    18ec:	91 f0       	breq	.+36     	; 0x1912 <__fixunssfsi+0x4c>
    18ee:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__fp_zero>
    18f2:	b1 e0       	ldi	r27, 0x01	; 1
    18f4:	08 95       	ret
    18f6:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__fp_zero>
    18fa:	67 2f       	mov	r22, r23
    18fc:	78 2f       	mov	r23, r24
    18fe:	88 27       	eor	r24, r24
    1900:	b8 5f       	subi	r27, 0xF8	; 248
    1902:	39 f0       	breq	.+14     	; 0x1912 <__fixunssfsi+0x4c>
    1904:	b9 3f       	cpi	r27, 0xF9	; 249
    1906:	cc f3       	brlt	.-14     	; 0x18fa <__fixunssfsi+0x34>
    1908:	86 95       	lsr	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b3 95       	inc	r27
    1910:	d9 f7       	brne	.-10     	; 0x1908 <__fixunssfsi+0x42>
    1912:	3e f4       	brtc	.+14     	; 0x1922 <__fixunssfsi+0x5c>
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	08 95       	ret

00001924 <__floatunsisf>:
    1924:	e8 94       	clt
    1926:	09 c0       	rjmp	.+18     	; 0x193a <__floatsisf+0x12>

00001928 <__floatsisf>:
    1928:	97 fb       	bst	r25, 7
    192a:	3e f4       	brtc	.+14     	; 0x193a <__floatsisf+0x12>
    192c:	90 95       	com	r25
    192e:	80 95       	com	r24
    1930:	70 95       	com	r23
    1932:	61 95       	neg	r22
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	99 23       	and	r25, r25
    193c:	a9 f0       	breq	.+42     	; 0x1968 <__floatsisf+0x40>
    193e:	f9 2f       	mov	r31, r25
    1940:	96 e9       	ldi	r25, 0x96	; 150
    1942:	bb 27       	eor	r27, r27
    1944:	93 95       	inc	r25
    1946:	f6 95       	lsr	r31
    1948:	87 95       	ror	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b7 95       	ror	r27
    1950:	f1 11       	cpse	r31, r1
    1952:	f8 cf       	rjmp	.-16     	; 0x1944 <__floatsisf+0x1c>
    1954:	fa f4       	brpl	.+62     	; 0x1994 <__floatsisf+0x6c>
    1956:	bb 0f       	add	r27, r27
    1958:	11 f4       	brne	.+4      	; 0x195e <__floatsisf+0x36>
    195a:	60 ff       	sbrs	r22, 0
    195c:	1b c0       	rjmp	.+54     	; 0x1994 <__floatsisf+0x6c>
    195e:	6f 5f       	subi	r22, 0xFF	; 255
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	16 c0       	rjmp	.+44     	; 0x1994 <__floatsisf+0x6c>
    1968:	88 23       	and	r24, r24
    196a:	11 f0       	breq	.+4      	; 0x1970 <__floatsisf+0x48>
    196c:	96 e9       	ldi	r25, 0x96	; 150
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <__floatsisf+0x6a>
    1970:	77 23       	and	r23, r23
    1972:	21 f0       	breq	.+8      	; 0x197c <__floatsisf+0x54>
    1974:	9e e8       	ldi	r25, 0x8E	; 142
    1976:	87 2f       	mov	r24, r23
    1978:	76 2f       	mov	r23, r22
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__floatsisf+0x5e>
    197c:	66 23       	and	r22, r22
    197e:	71 f0       	breq	.+28     	; 0x199c <__floatsisf+0x74>
    1980:	96 e8       	ldi	r25, 0x86	; 134
    1982:	86 2f       	mov	r24, r22
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	2a f0       	brmi	.+10     	; 0x1994 <__floatsisf+0x6c>
    198a:	9a 95       	dec	r25
    198c:	66 0f       	add	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	88 1f       	adc	r24, r24
    1992:	da f7       	brpl	.-10     	; 0x198a <__floatsisf+0x62>
    1994:	88 0f       	add	r24, r24
    1996:	96 95       	lsr	r25
    1998:	87 95       	ror	r24
    199a:	97 f9       	bld	r25, 7
    199c:	08 95       	ret

0000199e <__fp_cmp>:
    199e:	99 0f       	add	r25, r25
    19a0:	00 08       	sbc	r0, r0
    19a2:	55 0f       	add	r21, r21
    19a4:	aa 0b       	sbc	r26, r26
    19a6:	e0 e8       	ldi	r30, 0x80	; 128
    19a8:	fe ef       	ldi	r31, 0xFE	; 254
    19aa:	16 16       	cp	r1, r22
    19ac:	17 06       	cpc	r1, r23
    19ae:	e8 07       	cpc	r30, r24
    19b0:	f9 07       	cpc	r31, r25
    19b2:	c0 f0       	brcs	.+48     	; 0x19e4 <__fp_cmp+0x46>
    19b4:	12 16       	cp	r1, r18
    19b6:	13 06       	cpc	r1, r19
    19b8:	e4 07       	cpc	r30, r20
    19ba:	f5 07       	cpc	r31, r21
    19bc:	98 f0       	brcs	.+38     	; 0x19e4 <__fp_cmp+0x46>
    19be:	62 1b       	sub	r22, r18
    19c0:	73 0b       	sbc	r23, r19
    19c2:	84 0b       	sbc	r24, r20
    19c4:	95 0b       	sbc	r25, r21
    19c6:	39 f4       	brne	.+14     	; 0x19d6 <__fp_cmp+0x38>
    19c8:	0a 26       	eor	r0, r26
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <__fp_cmp+0x46>
    19cc:	23 2b       	or	r18, r19
    19ce:	24 2b       	or	r18, r20
    19d0:	25 2b       	or	r18, r21
    19d2:	21 f4       	brne	.+8      	; 0x19dc <__fp_cmp+0x3e>
    19d4:	08 95       	ret
    19d6:	0a 26       	eor	r0, r26
    19d8:	09 f4       	brne	.+2      	; 0x19dc <__fp_cmp+0x3e>
    19da:	a1 40       	sbci	r26, 0x01	; 1
    19dc:	a6 95       	lsr	r26
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	81 1d       	adc	r24, r1
    19e2:	81 1d       	adc	r24, r1
    19e4:	08 95       	ret

000019e6 <__fp_inf>:
    19e6:	97 f9       	bld	r25, 7
    19e8:	9f 67       	ori	r25, 0x7F	; 127
    19ea:	80 e8       	ldi	r24, 0x80	; 128
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	08 95       	ret

000019f2 <__fp_nan>:
    19f2:	9f ef       	ldi	r25, 0xFF	; 255
    19f4:	80 ec       	ldi	r24, 0xC0	; 192
    19f6:	08 95       	ret

000019f8 <__fp_pscA>:
    19f8:	00 24       	eor	r0, r0
    19fa:	0a 94       	dec	r0
    19fc:	16 16       	cp	r1, r22
    19fe:	17 06       	cpc	r1, r23
    1a00:	18 06       	cpc	r1, r24
    1a02:	09 06       	cpc	r0, r25
    1a04:	08 95       	ret

00001a06 <__fp_pscB>:
    1a06:	00 24       	eor	r0, r0
    1a08:	0a 94       	dec	r0
    1a0a:	12 16       	cp	r1, r18
    1a0c:	13 06       	cpc	r1, r19
    1a0e:	14 06       	cpc	r1, r20
    1a10:	05 06       	cpc	r0, r21
    1a12:	08 95       	ret

00001a14 <__fp_round>:
    1a14:	09 2e       	mov	r0, r25
    1a16:	03 94       	inc	r0
    1a18:	00 0c       	add	r0, r0
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__fp_round+0xc>
    1a1c:	88 23       	and	r24, r24
    1a1e:	52 f0       	brmi	.+20     	; 0x1a34 <__fp_round+0x20>
    1a20:	bb 0f       	add	r27, r27
    1a22:	40 f4       	brcc	.+16     	; 0x1a34 <__fp_round+0x20>
    1a24:	bf 2b       	or	r27, r31
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <__fp_round+0x18>
    1a28:	60 ff       	sbrs	r22, 0
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <__fp_round+0x20>
    1a2c:	6f 5f       	subi	r22, 0xFF	; 255
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	08 95       	ret

00001a36 <__fp_split3>:
    1a36:	57 fd       	sbrc	r21, 7
    1a38:	90 58       	subi	r25, 0x80	; 128
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <__fp_splitA+0x10>
    1a40:	5f 3f       	cpi	r21, 0xFF	; 255
    1a42:	71 f0       	breq	.+28     	; 0x1a60 <__fp_splitA+0x1a>
    1a44:	47 95       	ror	r20

00001a46 <__fp_splitA>:
    1a46:	88 0f       	add	r24, r24
    1a48:	97 fb       	bst	r25, 7
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <__fp_splitA+0x20>
    1a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <__fp_splitA+0x2a>
    1a52:	87 95       	ror	r24
    1a54:	08 95       	ret
    1a56:	12 16       	cp	r1, r18
    1a58:	13 06       	cpc	r1, r19
    1a5a:	14 06       	cpc	r1, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	f2 cf       	rjmp	.-28     	; 0x1a44 <__fp_split3+0xe>
    1a60:	46 95       	lsr	r20
    1a62:	f1 df       	rcall	.-30     	; 0x1a46 <__fp_splitA>
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <__fp_splitA+0x30>
    1a66:	16 16       	cp	r1, r22
    1a68:	17 06       	cpc	r1, r23
    1a6a:	18 06       	cpc	r1, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	f1 cf       	rjmp	.-30     	; 0x1a52 <__fp_splitA+0xc>
    1a70:	86 95       	lsr	r24
    1a72:	71 05       	cpc	r23, r1
    1a74:	61 05       	cpc	r22, r1
    1a76:	08 94       	sec
    1a78:	08 95       	ret

00001a7a <__fp_zero>:
    1a7a:	e8 94       	clt

00001a7c <__fp_szero>:
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	66 27       	eor	r22, r22
    1a80:	77 27       	eor	r23, r23
    1a82:	cb 01       	movw	r24, r22
    1a84:	97 f9       	bld	r25, 7
    1a86:	08 95       	ret

00001a88 <__gesf2>:
    1a88:	0e 94 cf 0c 	call	0x199e	; 0x199e <__fp_cmp>
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <__gesf2+0x8>
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	08 95       	ret

00001a92 <__mulsf3>:
    1a92:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3x>
    1a96:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_round>
    1a9a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fp_pscA>
    1a9e:	38 f0       	brcs	.+14     	; 0x1aae <__mulsf3+0x1c>
    1aa0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fp_pscB>
    1aa4:	20 f0       	brcs	.+8      	; 0x1aae <__mulsf3+0x1c>
    1aa6:	95 23       	and	r25, r21
    1aa8:	11 f0       	breq	.+4      	; 0x1aae <__mulsf3+0x1c>
    1aaa:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>
    1aae:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_nan>
    1ab2:	11 24       	eor	r1, r1
    1ab4:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_szero>

00001ab8 <__mulsf3x>:
    1ab8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__fp_split3>
    1abc:	70 f3       	brcs	.-36     	; 0x1a9a <__mulsf3+0x8>

00001abe <__mulsf3_pse>:
    1abe:	95 9f       	mul	r25, r21
    1ac0:	c1 f3       	breq	.-16     	; 0x1ab2 <__mulsf3+0x20>
    1ac2:	95 0f       	add	r25, r21
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	55 1f       	adc	r21, r21
    1ac8:	62 9f       	mul	r22, r18
    1aca:	f0 01       	movw	r30, r0
    1acc:	72 9f       	mul	r23, r18
    1ace:	bb 27       	eor	r27, r27
    1ad0:	f0 0d       	add	r31, r0
    1ad2:	b1 1d       	adc	r27, r1
    1ad4:	63 9f       	mul	r22, r19
    1ad6:	aa 27       	eor	r26, r26
    1ad8:	f0 0d       	add	r31, r0
    1ada:	b1 1d       	adc	r27, r1
    1adc:	aa 1f       	adc	r26, r26
    1ade:	64 9f       	mul	r22, r20
    1ae0:	66 27       	eor	r22, r22
    1ae2:	b0 0d       	add	r27, r0
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	66 1f       	adc	r22, r22
    1ae8:	82 9f       	mul	r24, r18
    1aea:	22 27       	eor	r18, r18
    1aec:	b0 0d       	add	r27, r0
    1aee:	a1 1d       	adc	r26, r1
    1af0:	62 1f       	adc	r22, r18
    1af2:	73 9f       	mul	r23, r19
    1af4:	b0 0d       	add	r27, r0
    1af6:	a1 1d       	adc	r26, r1
    1af8:	62 1f       	adc	r22, r18
    1afa:	83 9f       	mul	r24, r19
    1afc:	a0 0d       	add	r26, r0
    1afe:	61 1d       	adc	r22, r1
    1b00:	22 1f       	adc	r18, r18
    1b02:	74 9f       	mul	r23, r20
    1b04:	33 27       	eor	r19, r19
    1b06:	a0 0d       	add	r26, r0
    1b08:	61 1d       	adc	r22, r1
    1b0a:	23 1f       	adc	r18, r19
    1b0c:	84 9f       	mul	r24, r20
    1b0e:	60 0d       	add	r22, r0
    1b10:	21 1d       	adc	r18, r1
    1b12:	82 2f       	mov	r24, r18
    1b14:	76 2f       	mov	r23, r22
    1b16:	6a 2f       	mov	r22, r26
    1b18:	11 24       	eor	r1, r1
    1b1a:	9f 57       	subi	r25, 0x7F	; 127
    1b1c:	50 40       	sbci	r21, 0x00	; 0
    1b1e:	9a f0       	brmi	.+38     	; 0x1b46 <__mulsf3_pse+0x88>
    1b20:	f1 f0       	breq	.+60     	; 0x1b5e <__mulsf3_pse+0xa0>
    1b22:	88 23       	and	r24, r24
    1b24:	4a f0       	brmi	.+18     	; 0x1b38 <__mulsf3_pse+0x7a>
    1b26:	ee 0f       	add	r30, r30
    1b28:	ff 1f       	adc	r31, r31
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	66 1f       	adc	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	91 50       	subi	r25, 0x01	; 1
    1b34:	50 40       	sbci	r21, 0x00	; 0
    1b36:	a9 f7       	brne	.-22     	; 0x1b22 <__mulsf3_pse+0x64>
    1b38:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	80 f0       	brcs	.+32     	; 0x1b5e <__mulsf3_pse+0xa0>
    1b3e:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>
    1b42:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_szero>
    1b46:	5f 3f       	cpi	r21, 0xFF	; 255
    1b48:	e4 f3       	brlt	.-8      	; 0x1b42 <__mulsf3_pse+0x84>
    1b4a:	98 3e       	cpi	r25, 0xE8	; 232
    1b4c:	d4 f3       	brlt	.-12     	; 0x1b42 <__mulsf3_pse+0x84>
    1b4e:	86 95       	lsr	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	b7 95       	ror	r27
    1b56:	f7 95       	ror	r31
    1b58:	e7 95       	ror	r30
    1b5a:	9f 5f       	subi	r25, 0xFF	; 255
    1b5c:	c1 f7       	brne	.-16     	; 0x1b4e <__mulsf3_pse+0x90>
    1b5e:	fe 2b       	or	r31, r30
    1b60:	88 0f       	add	r24, r24
    1b62:	91 1d       	adc	r25, r1
    1b64:	96 95       	lsr	r25
    1b66:	87 95       	ror	r24
    1b68:	97 f9       	bld	r25, 7
    1b6a:	08 95       	ret

00001b6c <pow>:
    1b6c:	fa 01       	movw	r30, r20
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	30 96       	adiw	r30, 0x00	; 0
    1b74:	21 05       	cpc	r18, r1
    1b76:	31 05       	cpc	r19, r1
    1b78:	a1 f1       	breq	.+104    	; 0x1be2 <pow+0x76>
    1b7a:	61 15       	cp	r22, r1
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	61 f4       	brne	.+24     	; 0x1b98 <pow+0x2c>
    1b80:	80 38       	cpi	r24, 0x80	; 128
    1b82:	bf e3       	ldi	r27, 0x3F	; 63
    1b84:	9b 07       	cpc	r25, r27
    1b86:	49 f1       	breq	.+82     	; 0x1bda <pow+0x6e>
    1b88:	68 94       	set
    1b8a:	90 38       	cpi	r25, 0x80	; 128
    1b8c:	81 05       	cpc	r24, r1
    1b8e:	61 f0       	breq	.+24     	; 0x1ba8 <pow+0x3c>
    1b90:	80 38       	cpi	r24, 0x80	; 128
    1b92:	bf ef       	ldi	r27, 0xFF	; 255
    1b94:	9b 07       	cpc	r25, r27
    1b96:	41 f0       	breq	.+16     	; 0x1ba8 <pow+0x3c>
    1b98:	99 23       	and	r25, r25
    1b9a:	4a f5       	brpl	.+82     	; 0x1bee <pow+0x82>
    1b9c:	ff 3f       	cpi	r31, 0xFF	; 255
    1b9e:	e1 05       	cpc	r30, r1
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	21 05       	cpc	r18, r1
    1ba4:	19 f1       	breq	.+70     	; 0x1bec <pow+0x80>
    1ba6:	e8 94       	clt
    1ba8:	08 94       	sec
    1baa:	e7 95       	ror	r30
    1bac:	d9 01       	movw	r26, r18
    1bae:	aa 23       	and	r26, r26
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <pow+0x50>
    1bb2:	ab 2f       	mov	r26, r27
    1bb4:	be 2f       	mov	r27, r30
    1bb6:	f8 5f       	subi	r31, 0xF8	; 248
    1bb8:	d0 f3       	brcs	.-12     	; 0x1bae <pow+0x42>
    1bba:	10 c0       	rjmp	.+32     	; 0x1bdc <pow+0x70>
    1bbc:	ff 5f       	subi	r31, 0xFF	; 255
    1bbe:	70 f4       	brcc	.+28     	; 0x1bdc <pow+0x70>
    1bc0:	a6 95       	lsr	r26
    1bc2:	e0 f7       	brcc	.-8      	; 0x1bbc <pow+0x50>
    1bc4:	f7 39       	cpi	r31, 0x97	; 151
    1bc6:	50 f0       	brcs	.+20     	; 0x1bdc <pow+0x70>
    1bc8:	19 f0       	breq	.+6      	; 0x1bd0 <pow+0x64>
    1bca:	ff 3a       	cpi	r31, 0xAF	; 175
    1bcc:	38 f4       	brcc	.+14     	; 0x1bdc <pow+0x70>
    1bce:	9f 77       	andi	r25, 0x7F	; 127
    1bd0:	9f 93       	push	r25
    1bd2:	0d d0       	rcall	.+26     	; 0x1bee <pow+0x82>
    1bd4:	0f 90       	pop	r0
    1bd6:	07 fc       	sbrc	r0, 7
    1bd8:	90 58       	subi	r25, 0x80	; 128
    1bda:	08 95       	ret
    1bdc:	46 f0       	brts	.+16     	; 0x1bee <pow+0x82>
    1bde:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_nan>
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	80 e8       	ldi	r24, 0x80	; 128
    1be8:	9f e3       	ldi	r25, 0x3F	; 63
    1bea:	08 95       	ret
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	9f 77       	andi	r25, 0x7F	; 127
    1bf0:	5f 93       	push	r21
    1bf2:	4f 93       	push	r20
    1bf4:	3f 93       	push	r19
    1bf6:	2f 93       	push	r18
    1bf8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <log>
    1bfc:	2f 91       	pop	r18
    1bfe:	3f 91       	pop	r19
    1c00:	4f 91       	pop	r20
    1c02:	5f 91       	pop	r21
    1c04:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__mulsf3>
    1c08:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <exp>
    1c0c:	29 f4       	brne	.+10     	; 0x1c18 <pow+0xac>
    1c0e:	16 f0       	brts	.+4      	; 0x1c14 <pow+0xa8>
    1c10:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>
    1c14:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__fp_zero>
    1c18:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_nan>

00001c1c <exp>:
    1c1c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fp_splitA>
    1c20:	a8 f3       	brcs	.-22     	; 0x1c0c <pow+0xa0>
    1c22:	96 38       	cpi	r25, 0x86	; 134
    1c24:	a0 f7       	brcc	.-24     	; 0x1c0e <pow+0xa2>
    1c26:	07 f8       	bld	r0, 7
    1c28:	0f 92       	push	r0
    1c2a:	e8 94       	clt
    1c2c:	2b e3       	ldi	r18, 0x3B	; 59
    1c2e:	3a ea       	ldi	r19, 0xAA	; 170
    1c30:	48 eb       	ldi	r20, 0xB8	; 184
    1c32:	5f e7       	ldi	r21, 0x7F	; 127
    1c34:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__mulsf3_pse>
    1c38:	0f 92       	push	r0
    1c3a:	0f 92       	push	r0
    1c3c:	0f 92       	push	r0
    1c3e:	4d b7       	in	r20, 0x3d	; 61
    1c40:	5e b7       	in	r21, 0x3e	; 62
    1c42:	0f 92       	push	r0
    1c44:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <modf>
    1c48:	e4 e5       	ldi	r30, 0x54	; 84
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__fp_powser>
    1c50:	4f 91       	pop	r20
    1c52:	5f 91       	pop	r21
    1c54:	ef 91       	pop	r30
    1c56:	ff 91       	pop	r31
    1c58:	e5 95       	asr	r30
    1c5a:	ee 1f       	adc	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	49 f0       	breq	.+18     	; 0x1c72 <exp+0x56>
    1c60:	fe 57       	subi	r31, 0x7E	; 126
    1c62:	e0 68       	ori	r30, 0x80	; 128
    1c64:	44 27       	eor	r20, r20
    1c66:	ee 0f       	add	r30, r30
    1c68:	44 1f       	adc	r20, r20
    1c6a:	fa 95       	dec	r31
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <exp+0x4a>
    1c6e:	41 95       	neg	r20
    1c70:	55 0b       	sbc	r21, r21
    1c72:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <ldexp>
    1c76:	0f 90       	pop	r0
    1c78:	07 fe       	sbrs	r0, 7
    1c7a:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <inverse>
    1c7e:	08 95       	ret

00001c80 <__fp_powser>:
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	1f 93       	push	r17
    1c86:	0f 93       	push	r16
    1c88:	ff 92       	push	r15
    1c8a:	ef 92       	push	r14
    1c8c:	df 92       	push	r13
    1c8e:	7b 01       	movw	r14, r22
    1c90:	8c 01       	movw	r16, r24
    1c92:	68 94       	set
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <__fp_powser+0x22>
    1c96:	da 2e       	mov	r13, r26
    1c98:	ef 01       	movw	r28, r30
    1c9a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3x>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e8 94       	clt
    1ca2:	a5 91       	lpm	r26, Z+
    1ca4:	25 91       	lpm	r18, Z+
    1ca6:	35 91       	lpm	r19, Z+
    1ca8:	45 91       	lpm	r20, Z+
    1caa:	55 91       	lpm	r21, Z+
    1cac:	a6 f3       	brts	.-24     	; 0x1c96 <__fp_powser+0x16>
    1cae:	ef 01       	movw	r28, r30
    1cb0:	0e 94 97 0b 	call	0x172e	; 0x172e <__addsf3x>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	97 01       	movw	r18, r14
    1cb8:	a8 01       	movw	r20, r16
    1cba:	da 94       	dec	r13
    1cbc:	69 f7       	brne	.-38     	; 0x1c98 <__fp_powser+0x18>
    1cbe:	df 90       	pop	r13
    1cc0:	ef 90       	pop	r14
    1cc2:	ff 90       	pop	r15
    1cc4:	0f 91       	pop	r16
    1cc6:	1f 91       	pop	r17
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <inverse>:
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	80 e8       	ldi	r24, 0x80	; 128
    1cd8:	9f e3       	ldi	r25, 0x3F	; 63
    1cda:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__divsf3>
    1cde:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>
    1ce2:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_mpack>

00001ce6 <ldexp>:
    1ce6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fp_splitA>
    1cea:	d8 f3       	brcs	.-10     	; 0x1ce2 <inverse+0x14>
    1cec:	99 23       	and	r25, r25
    1cee:	c9 f3       	breq	.-14     	; 0x1ce2 <inverse+0x14>
    1cf0:	94 0f       	add	r25, r20
    1cf2:	51 1d       	adc	r21, r1
    1cf4:	a3 f3       	brvs	.-24     	; 0x1cde <inverse+0x10>
    1cf6:	91 50       	subi	r25, 0x01	; 1
    1cf8:	50 40       	sbci	r21, 0x00	; 0
    1cfa:	94 f0       	brlt	.+36     	; 0x1d20 <ldexp+0x3a>
    1cfc:	59 f0       	breq	.+22     	; 0x1d14 <ldexp+0x2e>
    1cfe:	88 23       	and	r24, r24
    1d00:	32 f0       	brmi	.+12     	; 0x1d0e <ldexp+0x28>
    1d02:	66 0f       	add	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 1f       	adc	r24, r24
    1d08:	91 50       	subi	r25, 0x01	; 1
    1d0a:	50 40       	sbci	r21, 0x00	; 0
    1d0c:	c1 f7       	brne	.-16     	; 0x1cfe <ldexp+0x18>
    1d0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d10:	51 05       	cpc	r21, r1
    1d12:	2c f7       	brge	.-54     	; 0x1cde <inverse+0x10>
    1d14:	88 0f       	add	r24, r24
    1d16:	91 1d       	adc	r25, r1
    1d18:	96 95       	lsr	r25
    1d1a:	87 95       	ror	r24
    1d1c:	97 f9       	bld	r25, 7
    1d1e:	08 95       	ret
    1d20:	5f 3f       	cpi	r21, 0xFF	; 255
    1d22:	ac f0       	brlt	.+42     	; 0x1d4e <ldexp+0x68>
    1d24:	98 3e       	cpi	r25, 0xE8	; 232
    1d26:	9c f0       	brlt	.+38     	; 0x1d4e <ldexp+0x68>
    1d28:	bb 27       	eor	r27, r27
    1d2a:	86 95       	lsr	r24
    1d2c:	77 95       	ror	r23
    1d2e:	67 95       	ror	r22
    1d30:	b7 95       	ror	r27
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <ldexp+0x50>
    1d34:	b1 60       	ori	r27, 0x01	; 1
    1d36:	93 95       	inc	r25
    1d38:	c1 f7       	brne	.-16     	; 0x1d2a <ldexp+0x44>
    1d3a:	bb 0f       	add	r27, r27
    1d3c:	58 f7       	brcc	.-42     	; 0x1d14 <ldexp+0x2e>
    1d3e:	11 f4       	brne	.+4      	; 0x1d44 <ldexp+0x5e>
    1d40:	60 ff       	sbrs	r22, 0
    1d42:	e8 cf       	rjmp	.-48     	; 0x1d14 <ldexp+0x2e>
    1d44:	6f 5f       	subi	r22, 0xFF	; 255
    1d46:	7f 4f       	sbci	r23, 0xFF	; 255
    1d48:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	e3 cf       	rjmp	.-58     	; 0x1d14 <ldexp+0x2e>
    1d4e:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_szero>
    1d52:	16 f0       	brts	.+4      	; 0x1d58 <ldexp+0x72>
    1d54:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_mpack>
    1d58:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__fp_nan>
    1d5c:	68 94       	set
    1d5e:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__fp_inf>

00001d62 <log>:
    1d62:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fp_splitA>
    1d66:	a8 f3       	brcs	.-22     	; 0x1d52 <ldexp+0x6c>
    1d68:	99 23       	and	r25, r25
    1d6a:	c1 f3       	breq	.-16     	; 0x1d5c <ldexp+0x76>
    1d6c:	ae f3       	brts	.-22     	; 0x1d58 <ldexp+0x72>
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	1f 93       	push	r17
    1d74:	0f 93       	push	r16
    1d76:	ff 92       	push	r15
    1d78:	c9 2f       	mov	r28, r25
    1d7a:	dd 27       	eor	r29, r29
    1d7c:	88 23       	and	r24, r24
    1d7e:	2a f0       	brmi	.+10     	; 0x1d8a <log+0x28>
    1d80:	21 97       	sbiw	r28, 0x01	; 1
    1d82:	66 0f       	add	r22, r22
    1d84:	77 1f       	adc	r23, r23
    1d86:	88 1f       	adc	r24, r24
    1d88:	da f7       	brpl	.-10     	; 0x1d80 <log+0x1e>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f eb       	ldi	r21, 0xBF	; 191
    1d92:	9f e3       	ldi	r25, 0x3F	; 63
    1d94:	88 39       	cpi	r24, 0x98	; 152
    1d96:	20 f0       	brcs	.+8      	; 0x1da0 <log+0x3e>
    1d98:	80 3e       	cpi	r24, 0xE0	; 224
    1d9a:	38 f0       	brcs	.+14     	; 0x1daa <log+0x48>
    1d9c:	21 96       	adiw	r28, 0x01	; 1
    1d9e:	8f 77       	andi	r24, 0x7F	; 127
    1da0:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
    1da4:	ec e7       	ldi	r30, 0x7C	; 124
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <log+0x50>
    1daa:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
    1dae:	e9 ea       	ldi	r30, 0xA9	; 169
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__fp_powser>
    1db6:	8b 01       	movw	r16, r22
    1db8:	be 01       	movw	r22, r28
    1dba:	ec 01       	movw	r28, r24
    1dbc:	fb 2e       	mov	r15, r27
    1dbe:	6f 57       	subi	r22, 0x7F	; 127
    1dc0:	71 09       	sbc	r23, r1
    1dc2:	75 95       	asr	r23
    1dc4:	77 1f       	adc	r23, r23
    1dc6:	88 0b       	sbc	r24, r24
    1dc8:	99 0b       	sbc	r25, r25
    1dca:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatsisf>
    1dce:	28 e1       	ldi	r18, 0x18	; 24
    1dd0:	32 e7       	ldi	r19, 0x72	; 114
    1dd2:	41 e3       	ldi	r20, 0x31	; 49
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3x>
    1dda:	af 2d       	mov	r26, r15
    1ddc:	98 01       	movw	r18, r16
    1dde:	ae 01       	movw	r20, r28
    1de0:	ff 90       	pop	r15
    1de2:	0f 91       	pop	r16
    1de4:	1f 91       	pop	r17
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	0e 94 97 0b 	call	0x172e	; 0x172e <__addsf3x>
    1dee:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_round>

00001df2 <modf>:
    1df2:	fa 01       	movw	r30, r20
    1df4:	dc 01       	movw	r26, r24
    1df6:	aa 0f       	add	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	bf 57       	subi	r27, 0x7F	; 127
    1e00:	28 f4       	brcc	.+10     	; 0x1e0c <modf+0x1a>
    1e02:	22 27       	eor	r18, r18
    1e04:	33 27       	eor	r19, r19
    1e06:	44 27       	eor	r20, r20
    1e08:	50 78       	andi	r21, 0x80	; 128
    1e0a:	20 c0       	rjmp	.+64     	; 0x1e4c <modf+0x5a>
    1e0c:	b7 51       	subi	r27, 0x17	; 23
    1e0e:	90 f4       	brcc	.+36     	; 0x1e34 <modf+0x42>
    1e10:	ab 2f       	mov	r26, r27
    1e12:	00 24       	eor	r0, r0
    1e14:	46 95       	lsr	r20
    1e16:	37 95       	ror	r19
    1e18:	27 95       	ror	r18
    1e1a:	01 1c       	adc	r0, r1
    1e1c:	a3 95       	inc	r26
    1e1e:	d2 f3       	brmi	.-12     	; 0x1e14 <modf+0x22>
    1e20:	00 20       	and	r0, r0
    1e22:	71 f0       	breq	.+28     	; 0x1e40 <modf+0x4e>
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	44 1f       	adc	r20, r20
    1e2a:	b3 95       	inc	r27
    1e2c:	da f3       	brmi	.-10     	; 0x1e24 <modf+0x32>
    1e2e:	0e d0       	rcall	.+28     	; 0x1e4c <modf+0x5a>
    1e30:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__subsf3>
    1e34:	61 30       	cpi	r22, 0x01	; 1
    1e36:	71 05       	cpc	r23, r1
    1e38:	a0 e8       	ldi	r26, 0x80	; 128
    1e3a:	8a 07       	cpc	r24, r26
    1e3c:	b9 46       	sbci	r27, 0x69	; 105
    1e3e:	30 f4       	brcc	.+12     	; 0x1e4c <modf+0x5a>
    1e40:	9b 01       	movw	r18, r22
    1e42:	ac 01       	movw	r20, r24
    1e44:	66 27       	eor	r22, r22
    1e46:	77 27       	eor	r23, r23
    1e48:	88 27       	eor	r24, r24
    1e4a:	90 78       	andi	r25, 0x80	; 128
    1e4c:	30 96       	adiw	r30, 0x00	; 0
    1e4e:	21 f0       	breq	.+8      	; 0x1e58 <modf+0x66>
    1e50:	20 83       	st	Z, r18
    1e52:	31 83       	std	Z+1, r19	; 0x01
    1e54:	42 83       	std	Z+2, r20	; 0x02
    1e56:	53 83       	std	Z+3, r21	; 0x03
    1e58:	08 95       	ret

00001e5a <__fp_mpack>:
    1e5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e5c:	31 f0       	breq	.+12     	; 0x1e6a <__fp_mpack_finite+0xc>

00001e5e <__fp_mpack_finite>:
    1e5e:	91 50       	subi	r25, 0x01	; 1
    1e60:	20 f4       	brcc	.+8      	; 0x1e6a <__fp_mpack_finite+0xc>
    1e62:	87 95       	ror	r24
    1e64:	77 95       	ror	r23
    1e66:	67 95       	ror	r22
    1e68:	b7 95       	ror	r27
    1e6a:	88 0f       	add	r24, r24
    1e6c:	91 1d       	adc	r25, r1
    1e6e:	96 95       	lsr	r25
    1e70:	87 95       	ror	r24
    1e72:	97 f9       	bld	r25, 7
    1e74:	08 95       	ret

00001e76 <__mulsi3>:
    1e76:	db 01       	movw	r26, r22
    1e78:	8f 93       	push	r24
    1e7a:	9f 93       	push	r25
    1e7c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__muluhisi3>
    1e80:	bf 91       	pop	r27
    1e82:	af 91       	pop	r26
    1e84:	a2 9f       	mul	r26, r18
    1e86:	80 0d       	add	r24, r0
    1e88:	91 1d       	adc	r25, r1
    1e8a:	a3 9f       	mul	r26, r19
    1e8c:	90 0d       	add	r25, r0
    1e8e:	b2 9f       	mul	r27, r18
    1e90:	90 0d       	add	r25, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	08 95       	ret

00001e96 <__udivmodsi4>:
    1e96:	a1 e2       	ldi	r26, 0x21	; 33
    1e98:	1a 2e       	mov	r1, r26
    1e9a:	aa 1b       	sub	r26, r26
    1e9c:	bb 1b       	sub	r27, r27
    1e9e:	fd 01       	movw	r30, r26
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <__udivmodsi4_ep>

00001ea2 <__udivmodsi4_loop>:
    1ea2:	aa 1f       	adc	r26, r26
    1ea4:	bb 1f       	adc	r27, r27
    1ea6:	ee 1f       	adc	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	a2 17       	cp	r26, r18
    1eac:	b3 07       	cpc	r27, r19
    1eae:	e4 07       	cpc	r30, r20
    1eb0:	f5 07       	cpc	r31, r21
    1eb2:	20 f0       	brcs	.+8      	; 0x1ebc <__udivmodsi4_ep>
    1eb4:	a2 1b       	sub	r26, r18
    1eb6:	b3 0b       	sbc	r27, r19
    1eb8:	e4 0b       	sbc	r30, r20
    1eba:	f5 0b       	sbc	r31, r21

00001ebc <__udivmodsi4_ep>:
    1ebc:	66 1f       	adc	r22, r22
    1ebe:	77 1f       	adc	r23, r23
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	1a 94       	dec	r1
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <__udivmodsi4_loop>
    1ec8:	60 95       	com	r22
    1eca:	70 95       	com	r23
    1ecc:	80 95       	com	r24
    1ece:	90 95       	com	r25
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	bd 01       	movw	r22, r26
    1ed6:	cf 01       	movw	r24, r30
    1ed8:	08 95       	ret

00001eda <__umulhisi3>:
    1eda:	a2 9f       	mul	r26, r18
    1edc:	b0 01       	movw	r22, r0
    1ede:	b3 9f       	mul	r27, r19
    1ee0:	c0 01       	movw	r24, r0
    1ee2:	a3 9f       	mul	r26, r19
    1ee4:	70 0d       	add	r23, r0
    1ee6:	81 1d       	adc	r24, r1
    1ee8:	11 24       	eor	r1, r1
    1eea:	91 1d       	adc	r25, r1
    1eec:	b2 9f       	mul	r27, r18
    1eee:	70 0d       	add	r23, r0
    1ef0:	81 1d       	adc	r24, r1
    1ef2:	11 24       	eor	r1, r1
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	08 95       	ret

00001ef8 <__muluhisi3>:
    1ef8:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__umulhisi3>
    1efc:	a5 9f       	mul	r26, r21
    1efe:	90 0d       	add	r25, r0
    1f00:	b4 9f       	mul	r27, r20
    1f02:	90 0d       	add	r25, r0
    1f04:	a4 9f       	mul	r26, r20
    1f06:	80 0d       	add	r24, r0
    1f08:	91 1d       	adc	r25, r1
    1f0a:	11 24       	eor	r1, r1
    1f0c:	08 95       	ret

00001f0e <_exit>:
    1f0e:	f8 94       	cli

00001f10 <__stop_program>:
    1f10:	ff cf       	rjmp	.-2      	; 0x1f10 <__stop_program>
